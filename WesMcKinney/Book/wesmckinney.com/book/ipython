<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><head>

<meta charset="utf-8">
<meta name="generator" content="quarto-1.3.450">

<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">


<title>Python for Data Analysis, 3E - Appendix B — More on the IPython System</title>
<style>
code{white-space: pre-wrap;}
span.smallcaps{font-variant: small-caps;}
div.columns{display: flex; gap: min(4vw, 1.5em);}
div.column{flex: auto; overflow-x: auto;}
div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
ul.task-list{list-style: none;}
ul.task-list li input[type="checkbox"] {
  width: 0.8em;
  margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ 
  vertical-align: middle;
}
/* CSS for syntax highlighting */
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
  }
pre.numberSource { margin-left: 3em;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
</style>


<script src="site_libs/quarto-nav/quarto-nav.js"></script>
<script src="site_libs/quarto-nav/headroom.min.js"></script>
<script src="site_libs/clipboard/clipboard.min.js"></script>
<script src="site_libs/quarto-search/autocomplete.umd.js"></script>
<script src="site_libs/quarto-search/fuse.min.js"></script>
<script src="site_libs/quarto-search/quarto-search.js"></script>
<meta name="quarto:offset" content="./">
<link href="./advanced-numpy.html" rel="prev">
<script src="site_libs/quarto-html/quarto.js"></script>
<script src="site_libs/quarto-html/popper.min.js"></script>
<script src="site_libs/quarto-html/tippy.umd.min.js"></script>
<script src="site_libs/quarto-html/anchor.min.js"></script>
<link href="site_libs/quarto-html/tippy.css" rel="stylesheet">
<link href="site_libs/quarto-html/quarto-syntax-highlighting.css" rel="stylesheet" class="quarto-color-scheme" id="quarto-text-highlighting-styles">
<link href="site_libs/quarto-html/quarto-syntax-highlighting-dark.css" rel="prefetch" class="quarto-color-scheme quarto-color-alternate" id="quarto-text-highlighting-styles">
<script src="site_libs/bootstrap/bootstrap.min.js"></script>
<link href="site_libs/bootstrap/bootstrap-icons.css" rel="stylesheet">
<link href="site_libs/bootstrap/bootstrap.min.css" rel="stylesheet" class="quarto-color-scheme" id="quarto-bootstrap" data-mode="light">
<link href="site_libs/bootstrap/bootstrap-dark.min.css" rel="prefetch" class="quarto-color-scheme quarto-color-alternate" id="quarto-bootstrap" data-mode="dark">
<script id="quarto-search-options" type="application/json">{
  "location": "navbar",
  "copy-button": false,
  "collapse-after": 3,
  "panel-placement": "end",
  "type": "overlay",
  "limit": 20,
  "language": {
    "search-no-results-text": "No results",
    "search-matching-documents-text": "matching documents",
    "search-copy-link-title": "Copy link to search",
    "search-hide-matches-text": "Hide additional matches",
    "search-more-match-text": "more match in this document",
    "search-more-matches-text": "more matches in this document",
    "search-clear-button-title": "Clear",
    "search-detached-cancel-button-title": "Cancel",
    "search-submit-button-title": "Submit",
    "search-label": "Search"
  }
}</script>


<link rel="stylesheet" href="styles.css">
<meta property="og:title" content="Python for Data Analysis, 3E - Appendix B — More on the IPython System">
<meta property="og:description" content="">
<meta property="og:image" content="images/cover.png">
<meta property="og:site-name" content="Python for Data Analysis, 3E">
<meta name="twitter:title" content="Python for Data Analysis, 3E - Appendix B — More on the IPython System">
<meta name="twitter:description" content="">
<meta name="twitter:image" content="images/cover.png">
<meta name="twitter:card" content="summary_large_image">
</head>

<body class="nav-sidebar floating nav-fixed">

<div id="quarto-search-results"></div>
  <header id="quarto-header" class="headroom fixed-top">
    <nav class="navbar navbar-expand-lg navbar-dark ">
      <div class="navbar-container container-fluid">
      <div class="navbar-brand-container">
    <a class='navbar-brand' href='/book/'>
    <span class="navbar-title">Python for Data Analysis, 3E</span>
    </a>
  </div>
            <div id="quarto-search" class="" title="Search"></div>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation" onclick="if (window.quartoToggleHeadroom) { window.quartoToggleHeadroom(); }">
  <span class="navbar-toggler-icon"></span>
</button>
          <div class="collapse navbar-collapse" id="navbarCollapse">
            <ul class="navbar-nav navbar-nav-scroll me-auto">
  <li class="nav-item">
    <a class='nav-link' href='https://wesmckinney.com/archives' rel target>
 <span class="menu-text">Wes’s Blog</span></a>
  </li>  
</ul>
            <ul class="navbar-nav navbar-nav-scroll ms-auto">
  <li class="nav-item compact">
    <a class="nav-link" href="https://twitter.com/wesmckinn" rel="" target=""><i class="bi bi-twitter" role="img">
</i> 
 <span class="menu-text"></span></a>
  </li>  
  <li class="nav-item dropdown ">
    <a class="nav-link dropdown-toggle" href="#" id="nav-menu-bi-github" role="button" data-bs-toggle="dropdown" aria-expanded="false" rel="" target="">
      <i class="bi bi-github" role="img">
</i> 
 <span class="menu-text"></span>
    </a>
    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="nav-menu-bi-github">    
        <li>
    <a class="dropdown-item" href="https://github.com/wesm/pydata-book" rel="" target="">
 <span class="dropdown-text">Data and Notebooks (GitHub)</span></a>
  </li>  
        <li>
    <a class="dropdown-item" href="https://gitee.com/wesmckinn/pydata-book" rel="" target="">
 <span class="dropdown-text">Data and Notebooks (Gitee)</span></a>
  </li>  
    </ul>
  </li>
</ul>
            <div class="quarto-navbar-tools">
  <a href="" class="quarto-color-scheme-toggle quarto-navigation-tool  px-1" onclick="window.quartoToggleColorScheme(); return false;" title="Toggle dark mode"><i class="bi"></i></a>
</div>
          </div> <!-- /navcollapse -->
      </div> <!-- /container-fluid -->
    </nav>
  <nav class="quarto-secondary-nav">
    <div class="container-fluid d-flex">
      <button type="button" class="quarto-btn-toggle btn" data-bs-toggle="collapse" data-bs-target="#quarto-sidebar,#quarto-sidebar-glass" aria-controls="quarto-sidebar" aria-expanded="false" aria-label="Toggle sidebar navigation" onclick="if (window.quartoToggleHeadroom) { window.quartoToggleHeadroom(); }">
        <i class="bi bi-layout-text-sidebar-reverse"></i>
      </button>
      <nav class="quarto-page-breadcrumbs" aria-label="breadcrumb"><ol class="breadcrumb"><li class="breadcrumb-item"><a href='/book/advanced-numpy'>Appendices</a></li><li class="breadcrumb-item"><a href='/book/ipython'><span class="chapter-number">B</span>&nbsp; <span class="chapter-title">More on the IPython System</span></a></li></ol></nav>
      <a class="flex-grow-1" role="button" data-bs-toggle="collapse" data-bs-target="#quarto-sidebar,#quarto-sidebar-glass" aria-controls="quarto-sidebar" aria-expanded="false" aria-label="Toggle sidebar navigation" onclick="if (window.quartoToggleHeadroom) { window.quartoToggleHeadroom(); }">      
      </a>
      <button type="button" class="btn quarto-search-button" aria-label="" onclick="window.quartoOpenSearch();">
        <i class="bi bi-search"></i>
      </button>
    </div>
  </nav>
</header>
<!-- content -->
<div id="quarto-content" class="quarto-container page-columns page-rows-contents page-layout-article page-navbar">
<!-- sidebar -->
  <nav id="quarto-sidebar" class="sidebar collapse collapse-horizontal sidebar-navigation floating overflow-auto">
        <div class="mt-2 flex-shrink-0 align-items-center">
        <div class="sidebar-search">
        <div id="quarto-search" class="" title="Search"></div>
        </div>
        </div>
    <div class="sidebar-menu-container"> 
    <ul class="list-unstyled mt-1">
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/'>
 <span class="menu-text">About the Open Edition</span></a>
  </div>
</li>
        <li class="sidebar-item sidebar-item-section">
      <div class="sidebar-item-container"> 
            <a class="sidebar-item-text sidebar-link text-start" data-bs-toggle="collapse" data-bs-target="#quarto-sidebar-section-1" aria-expanded="true">
 <span class="menu-text">Chapters</span></a>
          <a class="sidebar-item-toggle text-start" data-bs-toggle="collapse" data-bs-target="#quarto-sidebar-section-1" aria-expanded="true" aria-label="Toggle section">
            <i class="bi bi-chevron-right ms-2"></i>
          </a> 
      </div>
      <ul id="quarto-sidebar-section-1" class="collapse list-unstyled sidebar-section depth1 show">  
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/preface'>
 <span class="menu-text">Preface</span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/preliminaries'>
 <span class="menu-text"><span class="chapter-number">1</span>&nbsp; <span class="chapter-title">Preliminaries</span></span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/python-basics'>
 <span class="menu-text"><span class="chapter-number">2</span>&nbsp; <span class="chapter-title">Python Language Basics, IPython, and Jupyter Notebooks</span></span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/python-builtin'>
 <span class="menu-text"><span class="chapter-number">3</span>&nbsp; <span class="chapter-title">Built-In Data Structures, Functions, and Files</span></span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/numpy-basics'>
 <span class="menu-text"><span class="chapter-number">4</span>&nbsp; <span class="chapter-title">NumPy Basics: Arrays and Vectorized Computation</span></span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/pandas-basics'>
 <span class="menu-text"><span class="chapter-number">5</span>&nbsp; <span class="chapter-title">Getting Started with pandas</span></span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/accessing-data'>
 <span class="menu-text"><span class="chapter-number">6</span>&nbsp; <span class="chapter-title">Data Loading, Storage, and File Formats</span></span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/data-cleaning'>
 <span class="menu-text"><span class="chapter-number">7</span>&nbsp; <span class="chapter-title">Data Cleaning and Preparation</span></span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/data-wrangling'>
 <span class="menu-text"><span class="chapter-number">8</span>&nbsp; <span class="chapter-title">Data Wrangling: Join, Combine, and Reshape</span></span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/plotting-and-visualization'>
 <span class="menu-text"><span class="chapter-number">9</span>&nbsp; <span class="chapter-title">Plotting and Visualization</span></span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/data-aggregation'>
 <span class="menu-text"><span class="chapter-number">10</span>&nbsp; <span class="chapter-title">Data Aggregation and Group Operations</span></span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/time-series'>
 <span class="menu-text"><span class="chapter-number">11</span>&nbsp; <span class="chapter-title">Time Series</span></span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/modeling'>
 <span class="menu-text"><span class="chapter-number">12</span>&nbsp; <span class="chapter-title">Introduction to Modeling Libraries in Python</span></span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/data-analysis-examples'>
 <span class="menu-text"><span class="chapter-number">13</span>&nbsp; <span class="chapter-title">Data Analysis Examples</span></span></a>
  </div>
</li>
      </ul>
  </li>
        <li class="sidebar-item sidebar-item-section">
      <div class="sidebar-item-container"> 
            <a class="sidebar-item-text sidebar-link text-start" data-bs-toggle="collapse" data-bs-target="#quarto-sidebar-section-2" aria-expanded="true">
 <span class="menu-text">Appendices</span></a>
          <a class="sidebar-item-toggle text-start" data-bs-toggle="collapse" data-bs-target="#quarto-sidebar-section-2" aria-expanded="true" aria-label="Toggle section">
            <i class="bi bi-chevron-right ms-2"></i>
          </a> 
      </div>
      <ul id="quarto-sidebar-section-2" class="collapse list-unstyled sidebar-section depth1 show">  
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link' href='/book/advanced-numpy'>
 <span class="menu-text"><span class="chapter-number">A</span>&nbsp; <span class="chapter-title">Advanced NumPy</span></span></a>
  </div>
</li>
          <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a class='sidebar-item-text sidebar-link active' href='/book/ipython'>
 <span class="menu-text"><span class="chapter-number">B</span>&nbsp; <span class="chapter-title">More on the IPython System</span></span></a>
  </div>
</li>
      </ul>
  </li>
    </ul>
    </div>
</nav>
<div id="quarto-sidebar-glass" data-bs-toggle="collapse" data-bs-target="#quarto-sidebar,#quarto-sidebar-glass"></div>
<!-- margin-sidebar -->
    <div id="quarto-margin-sidebar" class="sidebar margin-sidebar"><div class="quarto-margin-header"><div class="margin-header-item">
<a href="https://amzn.to/3DyLaJc"><img src="images/cover.png" class="img-fluid"></a>
<div data-ea-publisher="wesmckinneycom" data-ea-type="image">

</div>
</div></div>
        <nav id="TOC" role="doc-toc" class="toc-active">
    <h2 id="toc-title">Table of contents</h2>
   
  <ul>
  <li><a href="#ipython_basics_keyboard_shortcuts" id="toc-ipython_basics_keyboard_shortcuts" class="nav-link active" data-scroll-target="#ipython_basics_keyboard_shortcuts"><span class="header-section-number">B.1</span> Terminal Keyboard Shortcuts</a></li>
  <li><a href="#ipython_magic" id="toc-ipython_magic" class="nav-link" data-scroll-target="#ipython_magic"><span class="header-section-number">B.2</span> About Magic Commands</a>
  <ul class="collapse">
  <li><a href="#ipython_basics_magic_run" id="toc-ipython_basics_magic_run" class="nav-link" data-scroll-target="#ipython_basics_magic_run">The %run Command</a></li>
  <li><a href="#ipython_basics_code_blocks" id="toc-ipython_basics_code_blocks" class="nav-link" data-scroll-target="#ipython_basics_code_blocks">Executing Code from the Clipboard</a></li>
  </ul></li>
  <li><a href="#command_history" id="toc-command_history" class="nav-link" data-scroll-target="#command_history"><span class="header-section-number">B.3</span> Using the Command History</a>
  <ul class="collapse">
  <li><a href="#ipython_history_searching" id="toc-ipython_history_searching" class="nav-link" data-scroll-target="#ipython_history_searching">Searching and Reusing the Command History</a></li>
  <li><a href="#ipython_history_variables" id="toc-ipython_history_variables" class="nav-link" data-scroll-target="#ipython_history_variables">Input and Output Variables</a></li>
  </ul></li>
  <li><a href="#ipython_os" id="toc-ipython_os" class="nav-link" data-scroll-target="#ipython_os"><span class="header-section-number">B.4</span> Interacting with the Operating System</a>
  <ul class="collapse">
  <li><a href="#ipython_os_commands" id="toc-ipython_os_commands" class="nav-link" data-scroll-target="#ipython_os_commands">Shell Commands and Aliases</a></li>
  <li><a href="#ipython_os_bookmark" id="toc-ipython_os_bookmark" class="nav-link" data-scroll-target="#ipython_os_bookmark">Directory Bookmark System</a></li>
  </ul></li>
  <li><a href="#ipython_dev" id="toc-ipython_dev" class="nav-link" data-scroll-target="#ipython_dev"><span class="header-section-number">B.5</span> Software Development Tools</a>
  <ul class="collapse">
  <li><a href="#interactive-debugger" id="toc-interactive-debugger" class="nav-link" data-scroll-target="#interactive-debugger">Interactive Debugger</a></li>
  <li><a href="#timing_commands" id="toc-timing_commands" class="nav-link" data-scroll-target="#timing_commands">Timing Code: %time and %timeit</a></li>
  <li><a href="#profiling_prun" id="toc-profiling_prun" class="nav-link" data-scroll-target="#profiling_prun">Basic Profiling: %prun and %run -p</a></li>
  <li><a href="#profiling_lprof" id="toc-profiling_lprof" class="nav-link" data-scroll-target="#profiling_lprof">Profiling a Function Line by Line</a></li>
  </ul></li>
  <li><a href="#workflow_run" id="toc-workflow_run" class="nav-link" data-scroll-target="#workflow_run"><span class="header-section-number">B.6</span> Tips for Productive Code Development Using IPython</a>
  <ul class="collapse">
  <li><a href="#workflow_run_reloading" id="toc-workflow_run_reloading" class="nav-link" data-scroll-target="#workflow_run_reloading">Reloading Module Dependencies</a></li>
  <li><a href="#workflow_designing" id="toc-workflow_designing" class="nav-link" data-scroll-target="#workflow_designing">Code Design Tips</a></li>
  </ul></li>
  <li><a href="#ipython_advanced" id="toc-ipython_advanced" class="nav-link" data-scroll-target="#ipython_advanced"><span class="header-section-number">B.7</span> Advanced IPython Features</a>
  <ul class="collapse">
  <li><a href="#ipython_configuration" id="toc-ipython_configuration" class="nav-link" data-scroll-target="#ipython_configuration">Profiles and Configuration</a></li>
  </ul></li>
  <li><a href="#ipython_wrapping_up" id="toc-ipython_wrapping_up" class="nav-link" data-scroll-target="#ipython_wrapping_up"><span class="header-section-number">B.8</span> Conclusion</a></li>
  </ul>
</nav>
    </div>
<!-- main -->
<main class="content" id="quarto-document-content">

<header id="title-block-header" class="quarto-title-block default">
<div class="quarto-title">
<h1 class="title"><span id="ipython" class="quarto-section-identifier">Appendix B — More on the IPython System</span></h1>
</div>



<div class="quarto-title-meta">

    
  
    
  </div>
  

</header>

<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>This Open Access web version of <em>Python for Data Analysis 3rd Edition</em> is now available as a companion to the <a href="https://amzn.to/3DyLaJc">print and digital editions</a>. If you encounter any errata, <a href="https://oreilly.com/catalog/0636920519829/errata">please report them here</a>. Please note that some aspects of this site as produced by Quarto will differ from the formatting of the print and eBook versions from O’Reilly.</p>
<p>If you find the online edition of the book useful, please consider <a href="https://amzn.to/3DyLaJc">ordering a paper copy</a> or a <a href="https://www.ebooks.com/en-us/book/210644288/python-for-data-analysis/wes-mckinney/?affId=WES398681F">DRM-free eBook</a> to support the author. The content from this website may not be copied or reproduced. The code examples are MIT licensed and can be found on GitHub or Gitee.</p>
</div>
</div>
</div>
<p>In <a href='/book/python-basics'>Ch 2: Python Language Basics, IPython, and Jupyter Notebooks</a> we looked at the basics of using the IPython shell and Jupyter notebook. In this appendix, we explore some deeper functionality in the IPython system that can either be used from the console or within Jupyter.</p>
<section id="ipython_basics_keyboard_shortcuts" class="level2" data-number="B.1">
<h2 data-number="B.1" class="anchored" data-anchor-id="ipython_basics_keyboard_shortcuts"><span class="header-section-number">B.1</span> Terminal Keyboard Shortcuts</h2>
<p>IPython has many keyboard shortcuts for navigating the prompt (which will be familiar to users of the Emacs text editor or the Unix bash shell) and interacting with the shell’s command history. <a href="#tbl-table_kbd_shortcuts">Table&nbsp;<span>B.1</span></a> summarizes some of the most commonly used shortcuts. See <a href="#fig-figure_ipython_keyboard">Figure&nbsp;<span>B.1</span></a> for an illustration of a few of these, such as cursor movement.</p>
<div id="tbl-table_kbd_shortcuts" class="anchored">
<table class="table">
<caption>Table&nbsp;B.1: Standard IPython keyboard shortcuts</caption>
<thead>
<tr class="header">
<th style="text-align: left;">Keyboard shortcut</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Ctrl-P or up-arrow</td>
<td style="text-align: left;">Search backward in command history for commands starting with currently entered text</td>
</tr>
<tr class="even">
<td style="text-align: left;">Ctrl-N or down-arrow</td>
<td style="text-align: left;">Search forward in command history for commands starting with currently entered text</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Ctrl-R</td>
<td style="text-align: left;">Readline-style reverse history search (partial matching)</td>
</tr>
<tr class="even">
<td style="text-align: left;">Ctrl-Shift-V</td>
<td style="text-align: left;">Paste text from clipboard</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Ctrl-C</td>
<td style="text-align: left;">Interrupt currently executing code</td>
</tr>
<tr class="even">
<td style="text-align: left;">Ctrl-A</td>
<td style="text-align: left;">Move cursor to beginning of line</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Ctrl-E</td>
<td style="text-align: left;">Move cursor to end of line</td>
</tr>
<tr class="even">
<td style="text-align: left;">Ctrl-K</td>
<td style="text-align: left;">Delete text from cursor until end of line</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Ctrl-U</td>
<td style="text-align: left;">Discard all text on current line</td>
</tr>
<tr class="even">
<td style="text-align: left;">Ctrl-F</td>
<td style="text-align: left;">Move cursor forward one character</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Ctrl-B</td>
<td style="text-align: left;">Move cursor back one character</td>
</tr>
<tr class="even">
<td style="text-align: left;">Ctrl-L</td>
<td style="text-align: left;">Clear screen</td>
</tr>
</tbody>
</table>
</div>
<div id="fig-figure_ipython_keyboard" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="images/pda3_b001.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;B.1: Illustration of some keyboard shortcuts in the IPython shell</figcaption>
</figure>
</div>
<p>Note that Jupyter notebooks have a largely separate set of keyboard shortcuts for navigation and editing. Since these shortcuts have evolved more rapidly than the ones in IPython, I encourage you to explore the integrated help system in the Jupyter notebook menus.</p>
</section>
<section id="ipython_magic" class="level2" data-number="B.2">
<h2 data-number="B.2" class="anchored" data-anchor-id="ipython_magic"><span class="header-section-number">B.2</span> About Magic Commands</h2>
<p>Special commands in IPython (which are not built into Python itself) are known as <em>magic</em> commands. These are designed to facilitate common tasks and enable you to easily control the behavior of the IPython system. A magic command is any command prefixed by the percent symbol <code>%</code>. For example, you can check the execution time of any Python statement, such as a matrix multiplication, using the <code>%timeit</code> magic function:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">20</span>]: a <span class="op">=</span> np.random.standard_normal((<span class="dv">100</span>, <span class="dv">100</span>))</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    In [<span class="dv">20</span>]: <span class="op">%</span>timeit np.dot(a, a)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="fl">92.5</span> µs ± <span class="fl">3.43</span> µs per loop (mean ± std. dev. of <span class="dv">7</span> runs, <span class="dv">10000</span> loops each)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Magic commands can be viewed as command-line programs to be run within the IPython system. Many of them have additional “command-line” options, which can all be viewed (as you might expect) using <code>?</code>:</p>
<pre><code>In [21]: %debug?
    Docstring:
    ::

    %debug [--breakpoint FILE:LINE] [statement [statement ...]]

    Activate the interactive debugger.

    This magic command support two ways of activating debugger.
    One is to activate debugger before executing code.  This way, you
    can set a break point, to step through the code from the point.
    You can use this mode by giving statements to execute and optionally
    a breakpoint.

    The other one is to activate debugger in post-mortem mode.  You can
    activate this mode simply running %debug without any argument.
    If an exception has just occurred, this lets you inspect its stack
    frames interactively.  Note that this will always work only on the last
    traceback that occurred, so you must call this quickly after an
    exception that you wish to inspect has fired, because if another one
    occurs, it clobbers the previous one.

    If you want IPython to automatically do this on every exception, see
    the %pdb magic for more details.

    .. versionchanged:: 7.3
    When running code, user variables are no longer expanded,
    the magic line is always left unmodified.

    positional arguments:
    statement             Code to run in debugger. You can omit this in cell 
    magic mode.

    optional arguments:
    --breakpoint &lt;FILE:LINE&gt;, -b &lt;FILE:LINE&gt;
    Set break point at LINE in FILE.</code></pre>
<p>Magic functions can be used by default without the percent sign, as long as no variable is defined with the same name as the magic function in question. This feature is called <em>automagic</em> and can be enabled or disabled with <code>%automagic</code>.</p>
<p>Some magic functions behave like Python functions, and their output can be assigned to a variable:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">22</span>]: <span class="op">%</span>pwd</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    Out[<span class="dv">22</span>]: <span class="st">'/home/wesm/code/pydata-book'</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    In [<span class="dv">23</span>]: foo <span class="op">=</span> <span class="op">%</span>pwd</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    In [<span class="dv">24</span>]: foo</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    Out[<span class="dv">24</span>]: <span class="st">'/home/wesm/code/pydata-book'</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Since IPython’s documentation is accessible from within the system, I encourage you to explore all of the special commands available by using <code>%quickref</code> or <code>%magic</code>. This information is shown in a console pager, so you will need to press <code>q</code> to exit from the pager. <a href="#tbl-ipython_magic_table">Table&nbsp;<span>B.2</span></a> highlights some of the most critical commands for being productive in interactive computing and Python development in IPython.</p>
<div id="tbl-ipython_magic_table" class="anchored">
<table class="table">
<caption>Table&nbsp;B.2: Some frequently used IPython magic commands</caption>
<thead>
<tr class="header">
<th style="text-align: left;">Command</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>%quickref</code></td>
<td style="text-align: left;">Display the IPython Quick Reference Card</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>%magic</code></td>
<td style="text-align: left;">Display detailed documentation for all of the available magic commands</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>%debug</code></td>
<td style="text-align: left;">Enter the interactive debugger at the bottom of the last exception traceback</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>%hist</code></td>
<td style="text-align: left;">Print command input (and optionally output) history</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>%pdb</code></td>
<td style="text-align: left;">Automatically enter debugger after any exception</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>%paste</code></td>
<td style="text-align: left;">Execute preformatted Python code from clipboard</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>%cpaste</code></td>
<td style="text-align: left;">Open a special prompt for manually pasting Python code to be executed</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>%reset</code></td>
<td style="text-align: left;">Delete all variables/names defined in an interactive namespace</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>%page</code> &lt;OBJECT&gt;</td>
<td style="text-align: left;">Pretty-print the object and display it through a pager</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>%run</code> &lt;script.py&gt;</td>
<td style="text-align: left;">Run a Python script inside IPython</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>%prun</code> &lt;statement&gt;</td>
<td style="text-align: left;">Execute &lt;statement&gt; with <code>cProfile</code> and report the profiler output</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>%time</code> &lt;statement&gt;</td>
<td style="text-align: left;">Report the execution time of a single statement</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>%timeit</code> &lt;statement&gt;</td>
<td style="text-align: left;">Run a statement multiple times to compute an ensemble average execution time; useful for timing code with very short execution time</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>%who, %who_ls, %whos</code></td>
<td style="text-align: left;">Display variables defined in interactive namespace, with varying levels of information/verbosity</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>%xdel</code> &lt;variable&gt;</td>
<td style="text-align: left;">Delete a variable and attempt to clear any references to the object in the IPython internals</td>
</tr>
</tbody>
</table>
</div>
<section id="ipython_basics_magic_run" class="level3">
<h3 class="anchored" data-anchor-id="ipython_basics_magic_run">The %run Command</h3>
<p>You can run any file as a Python program inside the environment of your IPython session using the <code>%run</code> command. Suppose you had the following simple script stored in <em>script.py</em>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> f(x, y, z):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> (x <span class="op">+</span> y) <span class="op">/</span> z</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> <span class="dv">6</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>c <span class="op">=</span> <span class="fl">7.5</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> f(a, b, c)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>You can execute this by passing the filename to <code>%run</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">14</span>]: <span class="op">%</span>run script.py</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>The script is run in an <em>empty namespace</em> (with no imports or other variables defined), so that the behavior should be identical to running the program on the command line using <code>python script.py</code>. All of the variables (imports, functions, and globals) defined in the file (up until an exception, if any, is raised) will then be accessible in the IPython shell:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">15</span>]: c</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>Out [<span class="dv">15</span>]: <span class="fl">7.5</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">16</span>]: result</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>Out[<span class="dv">16</span>]: <span class="fl">1.4666666666666666</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>If a Python script expects command-line arguments (to be found in <code>sys.argv</code>), these can be passed after the file path as though run on the command line.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you want to give a script access to variables already defined in the interactive IPython namespace, use <code>%run -i</code> instead of plain <code>%run</code>.</p>
</div>
</div>
<p>In the Jupyter notebook, you can also use the related <code>%load</code> magic function, which imports a script into a code cell:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">16</span>]: <span class="op">%</span>load script.py</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> f(x, y, z):</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> (x <span class="op">+</span> y) <span class="op">/</span> z</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    a <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    b <span class="op">=</span> <span class="dv">6</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    c <span class="op">=</span> <span class="fl">7.5</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    result <span class="op">=</span> f(a, b, c)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<section id="ipython_run_interrupt" class="level4">
<h4 class="anchored" data-anchor-id="ipython_run_interrupt">Interrupting running code</h4>
<p>Pressing Ctrl-C while any code is running, whether a script through <code>%run</code> or a long-running command, will raise a <code>KeyboardInterrupt</code>. This will cause nearly all Python programs to stop immediately except in certain unusual cases.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>When a piece of Python code has called into some compiled extension modules, pressing Ctrl-C will not always cause the program execution to stop immediately. In such cases, you will have to either wait until control is returned to the Python interpreter, or in more dire circumstances, forcibly terminate the Python process in your operating system (such as using Task Manager on Windows or the <code>kill</code> command on Linux).</p>
</div>
</div>
</section>
</section>
<section id="ipython_basics_code_blocks" class="level3">
<h3 class="anchored" data-anchor-id="ipython_basics_code_blocks">Executing Code from the Clipboard</h3>
<p>If you are using the Jupyter notebook, you can copy and paste code into any code cell and execute it. It is also possible to run code from the clipboard in the IPython shell. Suppose you had the following code in some other application:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> <span class="dv">7</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> x <span class="op">&gt;</span> <span class="dv">5</span>:</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    y <span class="op">=</span> <span class="dv">8</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>The most foolproof methods are the <code>%paste</code> and <code>%cpaste</code> magic functions (note that these do not work in Jupyter since you can copy and paste into a Jupyter code cell). <code>%paste</code> takes whatever text is in the clipboard and executes it as a single block in the shell:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">17</span>]: <span class="op">%</span>paste</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> <span class="dv">7</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> x <span class="op">&gt;</span> <span class="dv">5</span>:</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    y <span class="op">=</span> <span class="dv">8</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="co">## -- End pasted text --</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p><code>%cpaste</code> is similar, except that it gives you a special prompt for pasting code into:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">18</span>]: <span class="op">%</span>cpaste</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>Pasting code<span class="op">;</span> enter <span class="st">'--'</span> alone on the line to stop <span class="kw">or</span> use Ctrl<span class="op">-</span>D.</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>:x <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>:y <span class="op">=</span> <span class="dv">7</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>:<span class="cf">if</span> x <span class="op">&gt;</span> <span class="dv">5</span>:</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>:    x <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>:</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>:    y <span class="op">=</span> <span class="dv">8</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>:<span class="op">--</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>With the <code>%cpaste</code> block, you have the freedom to paste as much code as you like before executing it. You might decide to use <code>%cpaste</code> to look at the pasted code before executing it. If you accidentally paste the wrong code, you can break out of the <code>%cpaste</code> prompt by pressing Ctrl-C.</p>
</section>
</section>
<section id="command_history" class="level2" data-number="B.3">
<h2 data-number="B.3" class="anchored" data-anchor-id="command_history"><span class="header-section-number">B.3</span> Using the Command History</h2>
<p>IPython maintains a small on-disk database containing the text of each command that you execute. This serves various purposes:</p>
<ul>
<li><p>Searching, completing, and executing previously executed commands with minimal typing</p></li>
<li><p>Persisting the command history between sessions</p></li>
<li><p>Logging the input/output history to a file</p></li>
</ul>
<p>These features are more useful in the shell than in the notebook, since the notebook by design keeps a log of the input and output in each code cell.</p>
<section id="ipython_history_searching" class="level3">
<h3 class="anchored" data-anchor-id="ipython_history_searching">Searching and Reusing the Command History</h3>
<p>The IPython shell lets you search and execute previous code or other commands. This is useful, as you may often find yourself repeating the same commands, such as a <code>%run</code> command or some other code snippet. Suppose you had run:</p>
<pre><code>In[7]: %run first/second/third/data_script.py</code></pre>
<p>and then explored the results of the script (assuming it ran successfully), only to find that you made an incorrect calculation. After figuring out the problem and modifying <em>data_script.py</em>, you can start typing a few letters of the <code>%run</code> command and then press either the Ctrl-P key combination or the up arrow key. This will search the command history for the first prior command matching the letters you typed. Pressing either Ctrl-P or the up arrow key multiple times will continue to search through the history. If you pass over the command you wish to execute, fear not. You can move <em>forward</em> through the command history by pressing either Ctrl-N or the down arrow key. After doing this a few times, you may start pressing these keys without thinking!</p>
<p>Using Ctrl-R gives you the same partial incremental searching capability provided by the <code>readline</code> used in Unix-style shells, such as the bash shell. On Windows, <code>readline</code> functionality is emulated by IPython. To use this, press Ctrl-R and then type a few characters contained in the input line you want to search for:</p>
<pre><code>In [1]: a_command = foo(x, y, z)

(reverse-i-search)`com': a_command = foo(x, y, z)</code></pre>
<p>Pressing Ctrl-R will cycle through the history for each line, matching the characters you’ve typed.</p>
</section>
<section id="ipython_history_variables" class="level3">
<h3 class="anchored" data-anchor-id="ipython_history_variables">Input and Output Variables</h3>
<p>Forgetting to assign the result of a function call to a variable can be very annoying. An IPython session stores references to <em>both</em> the input commands and output Python objects in special variables. The previous two outputs are stored in the <code>_</code> (one underscore) and <code>__</code> (two underscores) variables, respectively:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">18</span>]: <span class="st">'input1'</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>Out[<span class="dv">18</span>]: <span class="st">'input1'</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">19</span>]: <span class="st">'input2'</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>Out[<span class="dv">19</span>]: <span class="st">'input2'</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">20</span>]: __</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>Out[<span class="dv">20</span>]: <span class="st">'input1'</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">21</span>]: <span class="st">'input3'</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>Out[<span class="dv">21</span>]: <span class="st">'input3'</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">22</span>]: _</span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>Out[<span class="dv">22</span>]: <span class="st">'input3'</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Input variables are stored in variables named <code>_iX</code>, where <code>X</code> is the input line number.</p>
<p>For each input variable there is a corresponding output variable <code>_X</code>. So after input line 27, say, there will be two new variables, <code>_27</code> (for the output) and <code>_i27</code> for the input:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">26</span>]: foo <span class="op">=</span> <span class="st">'bar'</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">27</span>]: foo</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>Out[<span class="dv">27</span>]: <span class="st">'bar'</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">28</span>]: _i27</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>Out[<span class="dv">28</span>]: <span class="st">u'foo'</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">29</span>]: _27</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>Out[<span class="dv">29</span>]: <span class="st">'bar'</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Since the input variables are strings, they can be executed again with the Python <code>eval</code> keyword:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">30</span>]: <span class="bu">eval</span>(_i27)</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>Out[<span class="dv">30</span>]: <span class="st">'bar'</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Here, <code>_i27</code> refers to the code input in <code>In [27]</code>.</p>
<p>Several magic functions allow you to work with the input and output history. <code>%hist</code> prints all or part of the input history, with or without line numbers. <code>%reset</code> clears the interactive namespace and optionally the input and output caches. The <code>%xdel</code> magic function removes all references to a <em>particular</em> object from the IPython machinery. See the documentation for these magics for more details.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>When working with very large datasets, keep in mind that IPython’s input and output history may cause objects referenced there to not be garbage collected (freeing up the memory), even if you delete the variables from the interactive namespace using the <code>del</code> keyword. In such cases, careful usage of <code>%xdel</code> and <code>%reset</code> can help you avoid running into memory problems.</p>
</div>
</div>
</section>
</section>
<section id="ipython_os" class="level2" data-number="B.4">
<h2 data-number="B.4" class="anchored" data-anchor-id="ipython_os"><span class="header-section-number">B.4</span> Interacting with the Operating System</h2>
<p>Another feature of IPython is that it allows you to access the filesystem and operating system shell. This means, among other things, that you can perform most standard command-line actions as you would in the Windows or Unix (Linux, macOS) shell without having to exit IPython. This includes shell commands, changing directories, and storing the results of a command in a Python object (list or string). There are also command aliasing and directory bookmarking features.</p>
<p>See <a href="#tbl-table_system_commands">Table&nbsp;<span>B.3</span></a> for a summary of magic functions and syntax for calling shell commands. I’ll briefly visit these features in the next few sections.</p>
<div id="tbl-table_system_commands" class="anchored">
<table class="table">
<caption>Table&nbsp;B.3: IPython system-related commands</caption>
<thead>
<tr class="header">
<th style="text-align: left;">Command</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>!cmd</code></td>
<td style="text-align: left;">Execute <code>cmd</code> in the system shell</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>output = !cmd args</code></td>
<td style="text-align: left;">Run <code>cmd</code> and store the stdout in <code>output</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>%alias alias_name cmd</code></td>
<td style="text-align: left;">Define an alias for a system (shell) command</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>%bookmark</code></td>
<td style="text-align: left;">Utilize IPython’s directory bookmarking system</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>%cd</code> &lt;directory&gt;</td>
<td style="text-align: left;">Change system working directory to passed directory</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>%pwd</code></td>
<td style="text-align: left;">Return to the current system working directory</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>%pushd</code> &lt;directory&gt;</td>
<td style="text-align: left;">Place current directory on stack and change to target directory</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>%popd</code></td>
<td style="text-align: left;">Change to directory popped off the top of the stack</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>%dirs</code></td>
<td style="text-align: left;">Return a list containing the current directory stack</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>%dhist</code></td>
<td style="text-align: left;">Print the history of visited directories</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>%env</code></td>
<td style="text-align: left;">Return the system environment variables as a dictionary</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>%matplotlib</code></td>
<td style="text-align: left;">Configure matplotlib integration options</td>
</tr>
</tbody>
</table>
</div>
<section id="ipython_os_commands" class="level3">
<h3 class="anchored" data-anchor-id="ipython_os_commands">Shell Commands and Aliases</h3>
<p>Starting a line in IPython with an exclamation point <code>!</code>, or bang, tells IPython to execute everything after the bang in the system shell. This means that you can delete files (using <code>rm</code> or <code>del</code>, depending on your OS), change directories, or execute any other process.</p>
<p>You can store the console output of a shell command in a variable by assigning the expression escaped with <code>!</code> to a variable. For example, on my Linux-based machine connected to the internet via Ethernet, I can get my IP address as a Python variable:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">1</span>]: ip_info <span class="op">=</span> <span class="op">!</span>ifconfig wlan0 <span class="op">|</span> grep <span class="st">"inet "</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">2</span>]: ip_info[<span class="dv">0</span>].strip()</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>Out[<span class="dv">2</span>]: <span class="st">'inet addr:10.0.0.11  Bcast:10.0.0.255  Mask:255.255.255.0'</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>The returned Python object <code>ip_info</code> is actually a custom list type containing various versions of the console output.</p>
<p>IPython can also substitute in Python values defined in the current environment when using <code>!</code>. To do this, preface the variable name with the dollar sign <code>$</code>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">3</span>]: foo <span class="op">=</span> <span class="st">'test*'</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">4</span>]: <span class="op">!</span>ls $foo</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>test4.py  test.py  test.xml</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>The <code>%alias</code> magic function can define custom shortcuts for shell commands. As an example:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">1</span>]: <span class="op">%</span>alias ll ls <span class="op">-</span>l</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">2</span>]: ll <span class="op">/</span>usr</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>total <span class="dv">332</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>drwxr<span class="op">-</span>xr<span class="op">-</span>x   <span class="dv">2</span> root root  <span class="dv">69632</span> <span class="dv">2012</span><span class="op">-</span><span class="dv">0</span><span class="er">1</span><span class="op">-</span><span class="dv">29</span> <span class="dv">20</span>:<span class="dv">36</span> <span class="bu">bin</span><span class="op">/</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>drwxr<span class="op">-</span>xr<span class="op">-</span>x   <span class="dv">2</span> root root   <span class="dv">4096</span> <span class="dv">2010</span><span class="op">-</span><span class="dv">0</span><span class="er">8</span><span class="op">-</span><span class="dv">23</span> <span class="dv">12</span>:<span class="dv">0</span><span class="er">5</span> games<span class="op">/</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>drwxr<span class="op">-</span>xr<span class="op">-</span>x <span class="dv">123</span> root root  <span class="dv">20480</span> <span class="dv">2011</span><span class="op">-</span><span class="dv">12</span><span class="op">-</span><span class="dv">26</span> <span class="dv">18</span>:<span class="dv">0</span><span class="er">8</span> include<span class="op">/</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>drwxr<span class="op">-</span>xr<span class="op">-</span>x <span class="dv">265</span> root root <span class="dv">126976</span> <span class="dv">2012</span><span class="op">-</span><span class="dv">0</span><span class="er">1</span><span class="op">-</span><span class="dv">29</span> <span class="dv">20</span>:<span class="dv">36</span> lib<span class="op">/</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>drwxr<span class="op">-</span>xr<span class="op">-</span>x  <span class="dv">44</span> root root  <span class="dv">69632</span> <span class="dv">2011</span><span class="op">-</span><span class="dv">12</span><span class="op">-</span><span class="dv">26</span> <span class="dv">18</span>:<span class="dv">0</span><span class="er">8</span> lib32<span class="op">/</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>lrwxrwxrwx   <span class="dv">1</span> root root      <span class="dv">3</span> <span class="dv">2010</span><span class="op">-</span><span class="dv">0</span><span class="er">8</span><span class="op">-</span><span class="dv">23</span> <span class="dv">16</span>:<span class="dv">0</span><span class="er">2</span> lib64 <span class="op">-&gt;</span> lib<span class="op">/</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>drwxr<span class="op">-</span>xr<span class="op">-</span>x  <span class="dv">15</span> root root   <span class="dv">4096</span> <span class="dv">2011</span><span class="op">-</span><span class="dv">10</span><span class="op">-</span><span class="dv">13</span> <span class="dv">19</span>:<span class="dv">0</span><span class="er">3</span> local<span class="op">/</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>drwxr<span class="op">-</span>xr<span class="op">-</span>x   <span class="dv">2</span> root root  <span class="dv">12288</span> <span class="dv">2012</span><span class="op">-</span><span class="dv">0</span><span class="er">1</span><span class="op">-</span><span class="dv">12</span> <span class="dv">0</span><span class="er">9</span>:<span class="dv">32</span> sbin<span class="op">/</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>drwxr<span class="op">-</span>xr<span class="op">-</span>x <span class="dv">387</span> root root  <span class="dv">12288</span> <span class="dv">2011</span><span class="op">-</span><span class="dv">11</span><span class="op">-</span><span class="dv">0</span><span class="er">4</span> <span class="dv">22</span>:<span class="dv">53</span> share<span class="op">/</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>drwxrwsr<span class="op">-</span>x  <span class="dv">24</span> root src    <span class="dv">4096</span> <span class="dv">2011</span><span class="op">-</span><span class="dv">0</span><span class="er">7</span><span class="op">-</span><span class="dv">17</span> <span class="dv">18</span>:<span class="dv">38</span> src<span class="op">/</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>You can execute multiple commands just as on the command line by separating them with semicolons:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">558</span>]: <span class="op">%</span>alias test_alias (cd examples<span class="op">;</span> ls<span class="op">;</span> cd ..)</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">559</span>]: test_alias</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>macrodata.csv  spx.csv  tips.csv</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>You’ll notice that IPython “forgets” any aliases you define interactively as soon as the session is closed. To create permanent aliases, you will need to use the configuration system.</p>
</section>
<section id="ipython_os_bookmark" class="level3">
<h3 class="anchored" data-anchor-id="ipython_os_bookmark">Directory Bookmark System</h3>
<p>IPython has a directory bookmarking system to enable you to save aliases for common directories so that you can jump around easily. For example, suppose you wanted to create a bookmark that points to the supplementary materials for this book:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">6</span>]: <span class="op">%</span>bookmark py4da <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Once you've done this, when you use the <code>%cd</code> magic, you can use any bookmarks you’ve defined:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">7</span>]: cd py4da</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>(bookmark:py4da) <span class="op">-&gt;</span> <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>If a bookmark name conflicts with a directory name in your current working directory, you can use the <code>-b</code> flag to override and use the bookmark location. Using the <code>-l</code> option with <code>%bookmark</code> lists all of your bookmarks:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">8</span>]: <span class="op">%</span>bookmark <span class="op">-</span>l</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>Current bookmarks:</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>py4da <span class="op">-&gt;</span> <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">-</span>source</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Bookmarks, unlike aliases, are automatically persisted between IPython sessions.</p>
</section>
</section>
<section id="ipython_dev" class="level2" data-number="B.5">
<h2 data-number="B.5" class="anchored" data-anchor-id="ipython_dev"><span class="header-section-number">B.5</span> Software Development Tools</h2>
<p>In addition to being a comfortable environment for interactive computing and data exploration, IPython can also be a useful companion for general Python software development. In data analysis applications, it’s important first to have <em>correct</em> code. Fortunately, IPython has closely integrated and enhanced the built-in Python <code>pdb</code> debugger. Secondly, you want your code to be <em>fast</em>. For this, IPython has convenient integrated code timing and profiling tools. I will give an overview of these tools in detail here.</p>
<section id="interactive-debugger" class="level3">
<h3 class="anchored" data-anchor-id="interactive-debugger">Interactive Debugger</h3>
<p>IPython’s debugger enhances <code>pdb</code> with tab completion, syntax highlighting, and context for each line in exception tracebacks. One of the best times to debug code is right after an error has occurred. The <code>%debug</code> command, when entered immediately after an exception, invokes the “postmortem” debugger and drops you into the stack frame where the exception was raised:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">2</span>]: run examples<span class="op">/</span>ipython_bug.py</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="op">---------------------------------------------------------------------------</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="pp">AssertionError</span>                            Traceback (most recent call last)</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a><span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py <span class="kw">in</span> <span class="op">&lt;</span>module<span class="op">&gt;</span>()</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>     <span class="dv">13</span>     throws_an_exception()</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a>     <span class="dv">14</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a><span class="op">---&gt;</span> <span class="dv">15</span> calling_things()</span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a><span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py <span class="kw">in</span> calling_things()</span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>     <span class="dv">11</span> <span class="kw">def</span> calling_things():</span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a>     <span class="dv">12</span>     works_fine()</span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a><span class="op">---&gt;</span> <span class="dv">13</span>     throws_an_exception()</span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a>     <span class="dv">14</span></span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a>     <span class="dv">15</span> calling_things()</span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-16"><a href="#cb23-16" aria-hidden="true" tabindex="-1"></a><span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py <span class="kw">in</span> throws_an_exception()</span>
<span id="cb23-17"><a href="#cb23-17" aria-hidden="true" tabindex="-1"></a>      <span class="dv">7</span>     a <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb23-18"><a href="#cb23-18" aria-hidden="true" tabindex="-1"></a>      <span class="dv">8</span>     b <span class="op">=</span> <span class="dv">6</span></span>
<span id="cb23-19"><a href="#cb23-19" aria-hidden="true" tabindex="-1"></a><span class="op">----&gt;</span> <span class="dv">9</span>     <span class="cf">assert</span>(a <span class="op">+</span> b <span class="op">==</span> <span class="dv">10</span>)</span>
<span id="cb23-20"><a href="#cb23-20" aria-hidden="true" tabindex="-1"></a>     <span class="dv">10</span></span>
<span id="cb23-21"><a href="#cb23-21" aria-hidden="true" tabindex="-1"></a>     <span class="dv">11</span> <span class="kw">def</span> calling_things():</span>
<span id="cb23-22"><a href="#cb23-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-23"><a href="#cb23-23" aria-hidden="true" tabindex="-1"></a><span class="pp">AssertionError</span>:</span>
<span id="cb23-24"><a href="#cb23-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-25"><a href="#cb23-25" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">3</span>]: <span class="op">%</span>debug</span>
<span id="cb23-26"><a href="#cb23-26" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py(<span class="dv">9</span>)throws_an_exception()</span>
<span id="cb23-27"><a href="#cb23-27" aria-hidden="true" tabindex="-1"></a>      <span class="dv">8</span>     b <span class="op">=</span> <span class="dv">6</span></span>
<span id="cb23-28"><a href="#cb23-28" aria-hidden="true" tabindex="-1"></a><span class="op">----&gt;</span> <span class="dv">9</span>     <span class="cf">assert</span>(a <span class="op">+</span> b <span class="op">==</span> <span class="dv">10</span>)</span>
<span id="cb23-29"><a href="#cb23-29" aria-hidden="true" tabindex="-1"></a>     <span class="dv">10</span></span>
<span id="cb23-30"><a href="#cb23-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-31"><a href="#cb23-31" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Once inside the debugger, you can execute arbitrary Python code and explore all of the objects and data (which have been “kept alive” by the interpreter) inside each stack frame. By default you start in the lowest level, where the error occurred. By typing <code>u</code> (up) and <code>d</code> (down), you can switch between the levels of the stack trace:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span> u</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py(<span class="dv">13</span>)calling_things()</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>     <span class="dv">12</span>     works_fine()</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a><span class="op">---&gt;</span> <span class="dv">13</span>     throws_an_exception()</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>     <span class="dv">14</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Executing the <code>%pdb</code> command makes IPython automatically invoke the debugger after any exception, a mode that many users will find useful.</p>
<p>It’s also helpful to use the debugger when developing code, especially when you need to set a breakpoint or step through the execution of a function or script to examine its behavior at each step. There are several ways to accomplish this. The first is by using <code>%run</code> with the <code>-d</code> flag, which invokes the debugger before executing any code in the passed script. You must immediately type <code>s</code> (step) to enter the script:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">5</span>]: run <span class="op">-</span>d examples<span class="op">/</span>ipython_bug.py</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>Breakpoint <span class="dv">1</span> at <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py:<span class="dv">1</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>NOTE: Enter <span class="st">'c'</span> at the ipdb<span class="op">&gt;</span>  prompt to start your script.</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">&lt;</span>string<span class="op">&gt;</span>(<span class="dv">1</span>)<span class="op">&lt;</span>module<span class="op">&gt;</span>()</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span> s</span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a><span class="op">--</span>Call<span class="op">--</span></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py(<span class="dv">1</span>)<span class="op">&lt;</span>module<span class="op">&gt;</span>()</span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span><span class="op">---&gt;</span> <span class="dv">1</span> <span class="kw">def</span> works_fine():</span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a>      <span class="dv">2</span>     a <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a>      <span class="dv">3</span>     b <span class="op">=</span> <span class="dv">6</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>After this point, it’s up to you how you want to work your way through the file. For example, in the preceding exception, we could set a breakpoint right before calling the <code>works_fine</code> function, and run the script until we reach the breakpoint by typing <code>c</code> (continue):</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span> b <span class="dv">12</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span> c</span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py(<span class="dv">12</span>)calling_things()</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>     <span class="dv">11</span> <span class="kw">def</span> calling_things():</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span><span class="op">--&gt;</span> <span class="dv">12</span>     works_fine()</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>     <span class="dv">13</span>     throws_an_exception()</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>At this point, you can <code>step</code> into <code>works_fine()</code> or execute <code>works_fine()</code> by typing <code>n</code> (next) to advance to the next line:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span> n</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py(<span class="dv">13</span>)calling_things()</span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span>    <span class="dv">12</span>     works_fine()</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a><span class="op">---&gt;</span> <span class="dv">13</span>     throws_an_exception()</span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>     <span class="dv">14</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Then, we could step into <code>throws_an_exception</code> and advance to the line where the error occurs and look at the variables in the scope. Note that debugger commands take precedence over variable names; in such cases, preface the variables with <code>!</code> to examine their contents:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span> s</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="op">--</span>Call<span class="op">--</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py(<span class="dv">6</span>)throws_an_exception()</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>      <span class="dv">5</span></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a><span class="op">----&gt;</span> <span class="dv">6</span> <span class="kw">def</span> throws_an_exception():</span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a>      <span class="dv">7</span>     a <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span> n</span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py(<span class="dv">7</span>)throws_an_exception()</span>
<span id="cb28-10"><a href="#cb28-10" aria-hidden="true" tabindex="-1"></a>      <span class="dv">6</span> <span class="kw">def</span> throws_an_exception():</span>
<span id="cb28-11"><a href="#cb28-11" aria-hidden="true" tabindex="-1"></a><span class="op">----&gt;</span> <span class="dv">7</span>     a <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb28-12"><a href="#cb28-12" aria-hidden="true" tabindex="-1"></a>      <span class="dv">8</span>     b <span class="op">=</span> <span class="dv">6</span></span>
<span id="cb28-13"><a href="#cb28-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-14"><a href="#cb28-14" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span> n</span>
<span id="cb28-15"><a href="#cb28-15" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py(<span class="dv">8</span>)throws_an_exception()</span>
<span id="cb28-16"><a href="#cb28-16" aria-hidden="true" tabindex="-1"></a>      <span class="dv">7</span>     a <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb28-17"><a href="#cb28-17" aria-hidden="true" tabindex="-1"></a><span class="op">----&gt;</span> <span class="dv">8</span>     b <span class="op">=</span> <span class="dv">6</span></span>
<span id="cb28-18"><a href="#cb28-18" aria-hidden="true" tabindex="-1"></a>      <span class="dv">9</span>     <span class="cf">assert</span>(a <span class="op">+</span> b <span class="op">==</span> <span class="dv">10</span>)</span>
<span id="cb28-19"><a href="#cb28-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-20"><a href="#cb28-20" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span> n</span>
<span id="cb28-21"><a href="#cb28-21" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py(<span class="dv">9</span>)throws_an_exception()</span>
<span id="cb28-22"><a href="#cb28-22" aria-hidden="true" tabindex="-1"></a>      <span class="dv">8</span>     b <span class="op">=</span> <span class="dv">6</span></span>
<span id="cb28-23"><a href="#cb28-23" aria-hidden="true" tabindex="-1"></a><span class="op">----&gt;</span> <span class="dv">9</span>     <span class="cf">assert</span>(a <span class="op">+</span> b <span class="op">==</span> <span class="dv">10</span>)</span>
<span id="cb28-24"><a href="#cb28-24" aria-hidden="true" tabindex="-1"></a>     <span class="dv">10</span></span>
<span id="cb28-25"><a href="#cb28-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-26"><a href="#cb28-26" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span> <span class="op">!</span>a</span>
<span id="cb28-27"><a href="#cb28-27" aria-hidden="true" tabindex="-1"></a><span class="dv">5</span></span>
<span id="cb28-28"><a href="#cb28-28" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span> <span class="op">!</span>b</span>
<span id="cb28-29"><a href="#cb28-29" aria-hidden="true" tabindex="-1"></a><span class="dv">6</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>In my experience, developing proficiency with the interactive debugger takes time and practice. See <a href="#tbl-pdb_command_table">Table&nbsp;<span>B.4</span></a> for a full catalog of the debugger commands. If you are accustomed to using an IDE, you might find the terminal-driven debugger to be a bit unforgiving at first, but that will improve in time. Some of the Python IDEs have excellent GUI debuggers, so most users can find something that works for them.</p>
<div id="tbl-pdb_command_table" class="anchored">
<table class="table">
<caption>Table&nbsp;B.4: Python debugger commands</caption>
<thead>
<tr class="header">
<th style="text-align: left;">Command</th>
<th style="text-align: left;">Action</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>h(elp)</code></td>
<td style="text-align: left;">Display command list</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>help</code> &lt;command&gt;</td>
<td style="text-align: left;">Show documentation for &lt;command&gt;</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>c(ontinue)</code></td>
<td style="text-align: left;">Resume program execution</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>q(uit)</code></td>
<td style="text-align: left;">Exit debugger without executing any more code</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>b(reak)</code> &lt;number&gt;</td>
<td style="text-align: left;">Set breakpoint at &lt;number&gt; in current file</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>b</code> &lt;path/to/file.py:number&gt;</td>
<td style="text-align: left;">Set breakpoint at line &lt;number&gt; in specified file</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>s(tep)</code></td>
<td style="text-align: left;">Step <em>into</em> function call</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>n(ext)</code></td>
<td style="text-align: left;">Execute current line and advance to next line at current level</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>u(p)</code>/<code>d(own)</code></td>
<td style="text-align: left;">Move up/down in function call stack</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>a(rgs)</code></td>
<td style="text-align: left;">Show arguments for current function</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>debug</code> &lt;statement&gt;</td>
<td style="text-align: left;">Invoke statement &lt;statement&gt; in new (recursive) debugger</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>l(ist)</code> &lt;statement&gt;</td>
<td style="text-align: left;">Show current position and context at current level of stack</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>w(here)</code></td>
<td style="text-align: left;">Print full stack trace with context at current position</td>
</tr>
</tbody>
</table>
</div>
<section id="ipython_debugger_other" class="level4">
<h4 class="anchored" data-anchor-id="ipython_debugger_other">Other ways to use the debugger</h4>
<p>There are a couple of other useful ways to invoke the debugger. The first is by using a special <code>set_trace</code> function (named after <code>pdb.set_trace</code>), which is basically a “poor man’s breakpoint.” Here are two small recipes you might want to put somewhere for your general use (potentially adding them to your IPython profile, as I do):</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> IPython.core.debugger <span class="im">import</span> Pdb</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> set_trace():</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>    Pdb(.set_trace(sys._getframe().f_back)</span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> debug(f, <span class="op">*</span>args, <span class="op">**</span>kwargs):</span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>    pdb <span class="op">=</span> Pdb()</span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> pdb.runcall(f, <span class="op">*</span>args, <span class="op">**</span>kwargs)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>The first function, <code>set_trace</code>, provides a convenient way to put a breakpoint somewhere in your code. You can use a <code>set_trace</code> in any part of your code that you want to temporarily stop to examine it more closely (e.g., right before an exception occurs):</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">7</span>]: run examples<span class="op">/</span>ipython_bug.py</span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py(<span class="dv">16</span>)calling_things()</span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a>     <span class="dv">15</span>     set_trace()</span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a><span class="op">---&gt;</span> <span class="dv">16</span>     throws_an_exception()</span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a>     <span class="dv">17</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Typing <code>c</code> (continue) will cause the code to resume normally with no harm done.</p>
<p>The <code>debug</code> function we just looked at enables you to invoke the interactive debugger easily on an arbitrary function call. Suppose we had written a function like the following, and we wished to step through its logic:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> f(x, y, z<span class="op">=</span><span class="dv">1</span>):</span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>    tmp <span class="op">=</span> x <span class="op">+</span> y</span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> tmp <span class="op">/</span> z</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Ordinarily using <code>f</code> would look like <code>f(1, 2, z=3)</code>. To instead step into <code>f</code>, pass <code>f</code> as the first argument to <code>debug</code>, followed by the positional and keyword arguments to be passed to <code>f</code>:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">6</span>]: debug(f, <span class="dv">1</span>, <span class="dv">2</span>, z<span class="op">=</span><span class="dv">3</span>)</span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">&lt;</span>ipython<span class="op">-</span><span class="bu">input</span><span class="op">&gt;</span>(<span class="dv">2</span>)f()</span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>      <span class="dv">1</span> <span class="kw">def</span> f(x, y, z):</span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a><span class="op">----&gt;</span> <span class="dv">2</span>     tmp <span class="op">=</span> x <span class="op">+</span> y</span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a>      <span class="dv">3</span>     <span class="cf">return</span> tmp <span class="op">/</span> z</span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>These two recipes have saved me a lot of time over the years.</p>
<p>Lastly, the debugger can be used in conjunction with <code>%run</code>. By running a script with <code>%run -d</code>, you will be dropped directly into the debugger, ready to set any breakpoints and start the script:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">1</span>]: <span class="op">%</span>run <span class="op">-</span>d examples<span class="op">/</span>ipython_bug.py</span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>Breakpoint <span class="dv">1</span> at <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py:<span class="dv">1</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>NOTE: Enter <span class="st">'c'</span> at the ipdb<span class="op">&gt;</span>  prompt to start your script.</span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">&lt;</span>string<span class="op">&gt;</span>(<span class="dv">1</span>)<span class="op">&lt;</span>module<span class="op">&gt;</span>()</span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-6"><a href="#cb33-6" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Adding <code>-b</code> with a line number starts the debugger with a breakpoint set already:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">2</span>]: <span class="op">%</span>run <span class="op">-</span>d <span class="op">-</span>b2 examples<span class="op">/</span>ipython_bug.py</span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a>Breakpoint <span class="dv">1</span> at <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py:<span class="dv">2</span></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a>NOTE: Enter <span class="st">'c'</span> at the ipdb<span class="op">&gt;</span>  prompt to start your script.</span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">&lt;</span>string<span class="op">&gt;</span>(<span class="dv">1</span>)<span class="op">&lt;</span>module<span class="op">&gt;</span>()</span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span> c</span>
<span id="cb34-7"><a href="#cb34-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">/</span>home<span class="op">/</span>wesm<span class="op">/</span>code<span class="op">/</span>pydata<span class="op">-</span>book<span class="op">/</span>examples<span class="op">/</span>ipython_bug.py(<span class="dv">2</span>)works_fine()</span>
<span id="cb34-8"><a href="#cb34-8" aria-hidden="true" tabindex="-1"></a>      <span class="dv">1</span> <span class="kw">def</span> works_fine():</span>
<span id="cb34-9"><a href="#cb34-9" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span><span class="op">---&gt;</span> <span class="dv">2</span>     a <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb34-10"><a href="#cb34-10" aria-hidden="true" tabindex="-1"></a>      <span class="dv">3</span>     b <span class="op">=</span> <span class="dv">6</span></span>
<span id="cb34-11"><a href="#cb34-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-12"><a href="#cb34-12" aria-hidden="true" tabindex="-1"></a>ipdb<span class="op">&gt;</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</section>
</section>
<section id="timing_commands" class="level3">
<h3 class="anchored" data-anchor-id="timing_commands">Timing Code: %time and %timeit</h3>
<p>For larger-scale or longer-running data analysis applications, you may wish to measure the execution time of various components or of individual statements or function calls. You may want a report of which functions are taking up the most time in a complex process. Fortunately, IPython enables you to get this information conveniently while you are developing and testing your code.</p>
<p>Timing code by hand using the built-in <code>time</code> module and its functions, <code>time.clock</code> and <code>time.time</code>, is often tedious and repetitive, as you must write the same uninteresting boilerplate code:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> time</span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a>start <span class="op">=</span> time.time()</span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(iterations):</span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a>    <span class="co"># some code to run here</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a>elapsed_per <span class="op">=</span> (time.time() <span class="op">-</span> start) <span class="op">/</span> iterations</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Since this is such a common operation, IPython has two magic functions, <code>%time</code> and <code>%timeit</code>, to automate this process for you.</p>
<p><code>%time</code> runs a statement once, reporting the total execution time. Suppose we had a large list of strings, and we wanted to compare different methods of selecting all strings starting with a particular prefix. Here is a list of 600,000 strings and two identical methods of selecting only the ones that start with <code>'foo'</code>:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="co"># a very large list of strings</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">11</span>]: strings <span class="op">=</span> [<span class="st">'foo'</span>, <span class="st">'foobar'</span>, <span class="st">'baz'</span>, <span class="st">'qux'</span>,</span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a>   ....:            <span class="st">'python'</span>, <span class="st">'Guido Van Rossum'</span>] <span class="op">*</span> <span class="dv">100000</span></span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">12</span>]: method1 <span class="op">=</span> [x <span class="cf">for</span> x <span class="kw">in</span> strings <span class="cf">if</span> x.startswith(<span class="st">'foo'</span>)]</span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">13</span>]: method2 <span class="op">=</span> [x <span class="cf">for</span> x <span class="kw">in</span> strings <span class="cf">if</span> x[:<span class="dv">3</span>] <span class="op">==</span> <span class="st">'foo'</span>]</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>It looks like they should be about the same performance-wise, right? We can check for sure using <code>%time</code>:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">14</span>]: <span class="op">%</span>time method1 <span class="op">=</span> [x <span class="cf">for</span> x <span class="kw">in</span> strings <span class="cf">if</span> x.startswith(<span class="st">'foo'</span>)]</span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a>CPU times: user <span class="fl">49.6</span> ms, sys: <span class="dv">676</span> us, total: <span class="fl">50.3</span> ms</span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a>Wall time: <span class="fl">50.1</span> ms</span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">15</span>]: <span class="op">%</span>time method2 <span class="op">=</span> [x <span class="cf">for</span> x <span class="kw">in</span> strings <span class="cf">if</span> x[:<span class="dv">3</span>] <span class="op">==</span> <span class="st">'foo'</span>]</span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true" tabindex="-1"></a>CPU times: user <span class="fl">40.3</span> ms, sys: <span class="dv">603</span> us, total: <span class="fl">40.9</span> ms</span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true" tabindex="-1"></a>Wall time: <span class="fl">40.6</span> ms</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>The <code>Wall time</code> (short for "wall-clock time") is the main number of interest. From these timings, we can infer that there is some performance difference, but it's not a very precise measurement. If you try <code>%time</code>-ing those statements multiple times yourself, you’ll find that the results are somewhat variable. To get a more precise measurement, use the <code>%timeit</code> magic function. Given an arbitrary statement, it has a heuristic to run a statement multiple times to produce a more accurate average runtime (these results may be different on your system):</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">563</span>]: <span class="op">%</span>timeit [x <span class="cf">for</span> x <span class="kw">in</span> strings <span class="cf">if</span> x.startswith(<span class="st">'foo'</span>)]</span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="dv">10</span> loops, best of <span class="dv">3</span>: <span class="dv">159</span> ms per loop</span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">564</span>]: <span class="op">%</span>timeit [x <span class="cf">for</span> x <span class="kw">in</span> strings <span class="cf">if</span> x[:<span class="dv">3</span>] <span class="op">==</span> <span class="st">'foo'</span>]</span>
<span id="cb38-5"><a href="#cb38-5" aria-hidden="true" tabindex="-1"></a><span class="dv">10</span> loops, best of <span class="dv">3</span>: <span class="fl">59.3</span> ms per loop</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>This seemingly innocuous example illustrates that it is worth understanding the performance characteristics of the Python standard library, NumPy, pandas, and other libraries used in this book. In larger-scale data analysis applications, those milliseconds will start to add up!</p>
<p><code>%timeit</code> is especially useful for analyzing statements and functions with very short execution times, even at the level of microseconds (millionths of a second) or nanoseconds (billionths of a second). These may seem like insignificant amounts of time, but of course a 20-microsecond function invoked 1 million times takes 15 seconds longer than a 5-microsecond function. In the preceding example, we could very directly compare the two string operations to understand their performance characteristics:</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">565</span>]: x <span class="op">=</span> <span class="st">'foobar'</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">566</span>]: y <span class="op">=</span> <span class="st">'foo'</span></span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">567</span>]: <span class="op">%</span>timeit x.startswith(y)</span>
<span id="cb39-6"><a href="#cb39-6" aria-hidden="true" tabindex="-1"></a><span class="dv">1000000</span> loops, best of <span class="dv">3</span>: <span class="dv">267</span> ns per loop</span>
<span id="cb39-7"><a href="#cb39-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-8"><a href="#cb39-8" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">568</span>]: <span class="op">%</span>timeit x[:<span class="dv">3</span>] <span class="op">==</span> y</span>
<span id="cb39-9"><a href="#cb39-9" aria-hidden="true" tabindex="-1"></a><span class="dv">10000000</span> loops, best of <span class="dv">3</span>: <span class="dv">147</span> ns per loop</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</section>
<section id="profiling_prun" class="level3">
<h3 class="anchored" data-anchor-id="profiling_prun">Basic Profiling: %prun and %run -p</h3>
<p>Profiling code is closely related to timing code, except it is concerned with determining <em>where</em> time is spent. The main Python profiling tool is the <code>cProfile</code> module, which is not specific to IPython at all. <code>cProfile</code> executes a program or any arbitrary block of code while keeping track of how much time is spent in each function.</p>
<p>A common way to use <code>cProfile</code> is on the command line, running an entire program and outputting the aggregated time per function. Suppose we had a script that does some linear algebra in a loop (computing the maximum absolute eigenvalues of a series of 100 × 100 matrices):</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> numpy.linalg <span class="im">import</span> eigvals</span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> run_experiment(niter<span class="op">=</span><span class="dv">100</span>):</span>
<span id="cb40-5"><a href="#cb40-5" aria-hidden="true" tabindex="-1"></a>    K <span class="op">=</span> <span class="dv">100</span></span>
<span id="cb40-6"><a href="#cb40-6" aria-hidden="true" tabindex="-1"></a>    results <span class="op">=</span> []</span>
<span id="cb40-7"><a href="#cb40-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(niter):</span>
<span id="cb40-8"><a href="#cb40-8" aria-hidden="true" tabindex="-1"></a>        mat <span class="op">=</span> np.random.standard_normal((K, K))</span>
<span id="cb40-9"><a href="#cb40-9" aria-hidden="true" tabindex="-1"></a>        max_eigenvalue <span class="op">=</span> np.<span class="bu">abs</span>(eigvals(mat)).<span class="bu">max</span>()</span>
<span id="cb40-10"><a href="#cb40-10" aria-hidden="true" tabindex="-1"></a>        results.append(max_eigenvalue)</span>
<span id="cb40-11"><a href="#cb40-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> results</span>
<span id="cb40-12"><a href="#cb40-12" aria-hidden="true" tabindex="-1"></a>some_results <span class="op">=</span> run_experiment()</span>
<span id="cb40-13"><a href="#cb40-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">'Largest one we saw: </span><span class="sc">{0}</span><span class="st">'</span>.<span class="bu">format</span>(np.<span class="bu">max</span>(some_results)))</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>You can run this script through <code>cProfile</code> using the following in the command line:</p>
<pre><code>python -m cProfile cprof_example.py</code></pre>
<p>If you try that, you’ll find that the output is sorted by function name. This makes it a bit hard to get an idea of where the most time is spent, so it’s useful to specify a <em>sort order</em> using the <code>-s</code> flag:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a>$ python <span class="op">-</span>m cProfile <span class="op">-</span>s cumulative cprof_example.py</span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a>Largest one we saw: <span class="fl">11.923204422</span></span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a>    <span class="dv">15116</span> function calls (<span class="dv">14927</span> primitive calls) <span class="kw">in</span> <span class="fl">0.720</span> seconds</span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb42-5"><a href="#cb42-5" aria-hidden="true" tabindex="-1"></a>Ordered by: cumulative time</span>
<span id="cb42-6"><a href="#cb42-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb42-7"><a href="#cb42-7" aria-hidden="true" tabindex="-1"></a>ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span>
<span id="cb42-8"><a href="#cb42-8" aria-hidden="true" tabindex="-1"></a>     <span class="dv">1</span>    <span class="fl">0.001</span>    <span class="fl">0.001</span>    <span class="fl">0.721</span>    <span class="fl">0.721</span> cprof_example.py:<span class="dv">1</span>(<span class="op">&lt;</span>module<span class="op">&gt;</span>)</span>
<span id="cb42-9"><a href="#cb42-9" aria-hidden="true" tabindex="-1"></a>   <span class="dv">100</span>    <span class="fl">0.003</span>    <span class="fl">0.000</span>    <span class="fl">0.586</span>    <span class="fl">0.006</span> linalg.py:<span class="dv">702</span>(eigvals)</span>
<span id="cb42-10"><a href="#cb42-10" aria-hidden="true" tabindex="-1"></a>   <span class="dv">200</span>    <span class="fl">0.572</span>    <span class="fl">0.003</span>    <span class="fl">0.572</span>    <span class="fl">0.003</span> {numpy.linalg.lapack_lite.dgeev}</span>
<span id="cb42-11"><a href="#cb42-11" aria-hidden="true" tabindex="-1"></a>     <span class="dv">1</span>    <span class="fl">0.002</span>    <span class="fl">0.002</span>    <span class="fl">0.075</span>    <span class="fl">0.075</span> <span class="fu">__init__</span>.py:<span class="dv">106</span>(<span class="op">&lt;</span>module<span class="op">&gt;</span>)</span>
<span id="cb42-12"><a href="#cb42-12" aria-hidden="true" tabindex="-1"></a>   <span class="dv">100</span>    <span class="fl">0.059</span>    <span class="fl">0.001</span>    <span class="fl">0.059</span>    <span class="fl">0.001</span> {method <span class="st">'randn'</span>)</span>
<span id="cb42-13"><a href="#cb42-13" aria-hidden="true" tabindex="-1"></a>     <span class="dv">1</span>    <span class="fl">0.000</span>    <span class="fl">0.000</span>    <span class="fl">0.044</span>    <span class="fl">0.044</span> add_newdocs.py:<span class="dv">9</span>(<span class="op">&lt;</span>module<span class="op">&gt;</span>)</span>
<span id="cb42-14"><a href="#cb42-14" aria-hidden="true" tabindex="-1"></a>     <span class="dv">2</span>    <span class="fl">0.001</span>    <span class="fl">0.001</span>    <span class="fl">0.037</span>    <span class="fl">0.019</span> <span class="fu">__init__</span>.py:<span class="dv">1</span>(<span class="op">&lt;</span>module<span class="op">&gt;</span>)</span>
<span id="cb42-15"><a href="#cb42-15" aria-hidden="true" tabindex="-1"></a>     <span class="dv">2</span>    <span class="fl">0.003</span>    <span class="fl">0.002</span>    <span class="fl">0.030</span>    <span class="fl">0.015</span> <span class="fu">__init__</span>.py:<span class="dv">2</span>(<span class="op">&lt;</span>module<span class="op">&gt;</span>)</span>
<span id="cb42-16"><a href="#cb42-16" aria-hidden="true" tabindex="-1"></a>     <span class="dv">1</span>    <span class="fl">0.000</span>    <span class="fl">0.000</span>    <span class="fl">0.030</span>    <span class="fl">0.030</span> type_check.py:<span class="dv">3</span>(<span class="op">&lt;</span>module<span class="op">&gt;</span>)</span>
<span id="cb42-17"><a href="#cb42-17" aria-hidden="true" tabindex="-1"></a>     <span class="dv">1</span>    <span class="fl">0.001</span>    <span class="fl">0.001</span>    <span class="fl">0.021</span>    <span class="fl">0.021</span> <span class="fu">__init__</span>.py:<span class="dv">15</span>(<span class="op">&lt;</span>module<span class="op">&gt;</span>)</span>
<span id="cb42-18"><a href="#cb42-18" aria-hidden="true" tabindex="-1"></a>     <span class="dv">1</span>    <span class="fl">0.013</span>    <span class="fl">0.013</span>    <span class="fl">0.013</span>    <span class="fl">0.013</span> numeric.py:<span class="dv">1</span>(<span class="op">&lt;</span>module<span class="op">&gt;</span>)</span>
<span id="cb42-19"><a href="#cb42-19" aria-hidden="true" tabindex="-1"></a>     <span class="dv">1</span>    <span class="fl">0.000</span>    <span class="fl">0.000</span>    <span class="fl">0.009</span>    <span class="fl">0.009</span> <span class="fu">__init__</span>.py:<span class="dv">6</span>(<span class="op">&lt;</span>module<span class="op">&gt;</span>)</span>
<span id="cb42-20"><a href="#cb42-20" aria-hidden="true" tabindex="-1"></a>     <span class="dv">1</span>    <span class="fl">0.001</span>    <span class="fl">0.001</span>    <span class="fl">0.008</span>    <span class="fl">0.008</span> <span class="fu">__init__</span>.py:<span class="dv">45</span>(<span class="op">&lt;</span>module<span class="op">&gt;</span>)</span>
<span id="cb42-21"><a href="#cb42-21" aria-hidden="true" tabindex="-1"></a>   <span class="dv">262</span>    <span class="fl">0.005</span>    <span class="fl">0.000</span>    <span class="fl">0.007</span>    <span class="fl">0.000</span> function_base.py:<span class="dv">3178</span>(add_newdoc)</span>
<span id="cb42-22"><a href="#cb42-22" aria-hidden="true" tabindex="-1"></a>   <span class="dv">100</span>    <span class="fl">0.003</span>    <span class="fl">0.000</span>    <span class="fl">0.005</span>    <span class="fl">0.000</span> linalg.py:<span class="dv">162</span>(_assertFinite)</span>
<span id="cb42-23"><a href="#cb42-23" aria-hidden="true" tabindex="-1"></a>   ...</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Only the first 15 rows of the output are shown. It’s easiest to read by scanning down the <code>cumtime</code> column to see how much total time was spent <em>inside</em> each function. Note that if a function calls some other function, <em>the clock does not stop running</em>. <code>cProfile</code> records the start and end time of each function call and uses that to produce the timing.</p>
<p>In addition to the command-line usage, <code>cProfile</code> can also be used programmatically to profile arbitrary blocks of code without having to run a new process. IPython has a convenient interface to this capability using the <code>%prun</code> command and the <code>-p</code> option to <code>%run</code>. <code>%prun</code> takes the same “command-line options” as <code>cProfile</code> but will profile an arbitrary Python statement instead of a whole <em>.py</em> file:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">4</span>]: <span class="op">%</span>prun <span class="op">-</span>l <span class="dv">7</span> <span class="op">-</span>s cumulative run_experiment()</span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a>         <span class="dv">4203</span> function calls <span class="kw">in</span> <span class="fl">0.643</span> seconds</span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true" tabindex="-1"></a>Ordered by: cumulative time</span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true" tabindex="-1"></a>List reduced <span class="im">from</span> <span class="dv">32</span> to <span class="dv">7</span> due to restriction <span class="op">&lt;</span><span class="dv">7</span><span class="op">&gt;</span></span>
<span id="cb43-6"><a href="#cb43-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-7"><a href="#cb43-7" aria-hidden="true" tabindex="-1"></a>ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span>
<span id="cb43-8"><a href="#cb43-8" aria-hidden="true" tabindex="-1"></a>     <span class="dv">1</span>    <span class="fl">0.000</span>    <span class="fl">0.000</span>    <span class="fl">0.643</span>    <span class="fl">0.643</span> <span class="op">&lt;</span>string<span class="op">&gt;</span>:<span class="dv">1</span>(<span class="op">&lt;</span>module<span class="op">&gt;</span>)</span>
<span id="cb43-9"><a href="#cb43-9" aria-hidden="true" tabindex="-1"></a>     <span class="dv">1</span>    <span class="fl">0.001</span>    <span class="fl">0.001</span>    <span class="fl">0.643</span>    <span class="fl">0.643</span> cprof_example.py:<span class="dv">4</span>(run_experiment)</span>
<span id="cb43-10"><a href="#cb43-10" aria-hidden="true" tabindex="-1"></a>   <span class="dv">100</span>    <span class="fl">0.003</span>    <span class="fl">0.000</span>    <span class="fl">0.583</span>    <span class="fl">0.006</span> linalg.py:<span class="dv">702</span>(eigvals)</span>
<span id="cb43-11"><a href="#cb43-11" aria-hidden="true" tabindex="-1"></a>   <span class="dv">200</span>    <span class="fl">0.569</span>    <span class="fl">0.003</span>    <span class="fl">0.569</span>    <span class="fl">0.003</span> {numpy.linalg.lapack_lite.dgeev}</span>
<span id="cb43-12"><a href="#cb43-12" aria-hidden="true" tabindex="-1"></a>   <span class="dv">100</span>    <span class="fl">0.058</span>    <span class="fl">0.001</span>    <span class="fl">0.058</span>    <span class="fl">0.001</span> {method <span class="st">'randn'</span>}</span>
<span id="cb43-13"><a href="#cb43-13" aria-hidden="true" tabindex="-1"></a>   <span class="dv">100</span>    <span class="fl">0.003</span>    <span class="fl">0.000</span>    <span class="fl">0.005</span>    <span class="fl">0.000</span> linalg.py:<span class="dv">162</span>(_assertFinite)</span>
<span id="cb43-14"><a href="#cb43-14" aria-hidden="true" tabindex="-1"></a>   <span class="dv">200</span>    <span class="fl">0.002</span>    <span class="fl">0.000</span>    <span class="fl">0.002</span>    <span class="fl">0.000</span> {method <span class="st">'all'</span> of <span class="st">'numpy.ndarray'</span>}</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Similarly, calling <code>%run -p -s cumulative cprof_example.py</code> has the same effect as the command-line approach, except you never have to leave IPython.</p>
<p>In the Jupyter notebook, you can use the <code>%%prun</code> magic (two <code>%</code> signs) to profile an entire code block. This pops up a separate window with the profile output. This can be useful in getting possibly quick answers to questions like, "Why did that code block take so long to run?"</p>
<p>There are other tools available that help make profiles easier to understand when you are using IPython or Jupyter. One of these is <a href="https://github.com/jiffyclub/snakeviz/">SnakeViz</a>, which produces an interactive visualization of the profile results using D3.js.</p>
</section>
<section id="profiling_lprof" class="level3">
<h3 class="anchored" data-anchor-id="profiling_lprof">Profiling a Function Line by Line</h3>
<p>In some cases, the information you obtain from <code>%prun</code> (or another <code>cProfile</code>-based profile method) may not tell the whole story about a function’s execution time, or it may be so complex that the results, aggregated by function name, are hard to interpret. For this case, there is a small library called <code>line_profiler</code> (obtainable via PyPI or one of the package management tools). It contains an IPython extension enabling a new magic function <code>%lprun</code> that computes a line-by-line-profiling of one or more functions. You can enable this extension by modifying your IPython configuration (see the IPython documentation or the section on configuration later in this appendix) to include the following line:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="co"># A list of dotted module names of IPython extensions to load.</span></span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true" tabindex="-1"></a>c.InteractiveShellApp.extensions <span class="op">=</span> [<span class="st">'line_profiler'</span>]</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>You can also run the command:</p>
<pre><code>%load_ext line_profiler</code></pre>
<p><code>line_profiler</code> can be used programmatically (see the full documentation), but it is perhaps most powerful when used interactively in IPython. Suppose you had a module <code>prof_mod</code> with the following code doing some NumPy array operations (if you want to reproduce this example, put this code into a new file <em>prof_mod.py</em>):</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> numpy.random <span class="im">import</span> randn</span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> add_and_sum(x, y):</span>
<span id="cb46-4"><a href="#cb46-4" aria-hidden="true" tabindex="-1"></a>    added <span class="op">=</span> x <span class="op">+</span> y</span>
<span id="cb46-5"><a href="#cb46-5" aria-hidden="true" tabindex="-1"></a>    summed <span class="op">=</span> added.<span class="bu">sum</span>(axis<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb46-6"><a href="#cb46-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> summed</span>
<span id="cb46-7"><a href="#cb46-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb46-8"><a href="#cb46-8" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> call_function():</span>
<span id="cb46-9"><a href="#cb46-9" aria-hidden="true" tabindex="-1"></a>    x <span class="op">=</span> randn(<span class="dv">1000</span>, <span class="dv">1000</span>)</span>
<span id="cb46-10"><a href="#cb46-10" aria-hidden="true" tabindex="-1"></a>    y <span class="op">=</span> randn(<span class="dv">1000</span>, <span class="dv">1000</span>)</span>
<span id="cb46-11"><a href="#cb46-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> add_and_sum(x, y)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>If we wanted to understand the performance of the <code>add_and_sum</code> function, <code>%prun</code> gives us the following:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">569</span>]: <span class="op">%</span>run prof_mod</span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">570</span>]: x <span class="op">=</span> randn(<span class="dv">3000</span>, <span class="dv">3000</span>)</span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-5"><a href="#cb47-5" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">571</span>]: y <span class="op">=</span> randn(<span class="dv">3000</span>, <span class="dv">3000</span>)</span>
<span id="cb47-6"><a href="#cb47-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-7"><a href="#cb47-7" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">572</span>]: <span class="op">%</span>prun add_and_sum(x, y)</span>
<span id="cb47-8"><a href="#cb47-8" aria-hidden="true" tabindex="-1"></a>         <span class="dv">4</span> function calls <span class="kw">in</span> <span class="fl">0.049</span> seconds</span>
<span id="cb47-9"><a href="#cb47-9" aria-hidden="true" tabindex="-1"></a>   Ordered by: internal time</span>
<span id="cb47-10"><a href="#cb47-10" aria-hidden="true" tabindex="-1"></a>   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span>
<span id="cb47-11"><a href="#cb47-11" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span>    <span class="fl">0.036</span>    <span class="fl">0.036</span>    <span class="fl">0.046</span>    <span class="fl">0.046</span> prof_mod.py:<span class="dv">3</span>(add_and_sum)</span>
<span id="cb47-12"><a href="#cb47-12" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span>    <span class="fl">0.009</span>    <span class="fl">0.009</span>    <span class="fl">0.009</span>    <span class="fl">0.009</span> {method <span class="st">'sum'</span> of <span class="st">'numpy.ndarray'</span>}</span>
<span id="cb47-13"><a href="#cb47-13" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span>    <span class="fl">0.003</span>    <span class="fl">0.003</span>    <span class="fl">0.049</span>    <span class="fl">0.049</span> <span class="op">&lt;</span>string<span class="op">&gt;</span>:<span class="dv">1</span>(<span class="op">&lt;</span>module<span class="op">&gt;</span>)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>This is not especially enlightening. With the <code>line_profiler</code> IPython extension activated, a new command <code>%lprun</code> is available. The only difference in usage is that we must instruct <code>%lprun</code> which function or functions we wish to profile. The general syntax is:</p>
<pre><code>%lprun -f func1 -f func2 statement_to_profile</code></pre>
<p>In this case, we want to profile <code>add_and_sum</code>, so we run:</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">573</span>]: <span class="op">%</span>lprun <span class="op">-</span>f add_and_sum add_and_sum(x, y)</span>
<span id="cb49-2"><a href="#cb49-2" aria-hidden="true" tabindex="-1"></a>Timer unit: <span class="fl">1e-06</span> s</span>
<span id="cb49-3"><a href="#cb49-3" aria-hidden="true" tabindex="-1"></a>File: prof_mod.py</span>
<span id="cb49-4"><a href="#cb49-4" aria-hidden="true" tabindex="-1"></a>Function: add_and_sum at line <span class="dv">3</span></span>
<span id="cb49-5"><a href="#cb49-5" aria-hidden="true" tabindex="-1"></a>Total time: <span class="fl">0.045936</span> s</span>
<span id="cb49-6"><a href="#cb49-6" aria-hidden="true" tabindex="-1"></a>Line <span class="co">#      Hits         Time  Per Hit   % Time  Line Contents</span></span>
<span id="cb49-7"><a href="#cb49-7" aria-hidden="true" tabindex="-1"></a><span class="op">==============================================================</span></span>
<span id="cb49-8"><a href="#cb49-8" aria-hidden="true" tabindex="-1"></a>     <span class="dv">3</span>                                           <span class="kw">def</span> add_and_sum(x, y):</span>
<span id="cb49-9"><a href="#cb49-9" aria-hidden="true" tabindex="-1"></a>     <span class="dv">4</span>         <span class="dv">1</span>        <span class="dv">36510</span>  <span class="fl">36510.0</span>     <span class="fl">79.5</span>      added <span class="op">=</span> x <span class="op">+</span> y</span>
<span id="cb49-10"><a href="#cb49-10" aria-hidden="true" tabindex="-1"></a>     <span class="dv">5</span>         <span class="dv">1</span>         <span class="dv">9425</span>   <span class="fl">9425.0</span>     <span class="fl">20.5</span>      summed <span class="op">=</span> added.<span class="bu">sum</span>(axis<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb49-11"><a href="#cb49-11" aria-hidden="true" tabindex="-1"></a>     <span class="dv">6</span>         <span class="dv">1</span>            <span class="dv">1</span>      <span class="fl">1.0</span>      <span class="fl">0.0</span>      <span class="cf">return</span> summed</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>This can be much easier to interpret. In this case, we profiled the same function we used in the statement. Looking at the preceding module code, we could call <code>call_function</code> and profile that as well as <code>add_and_sum</code>, thus getting a full picture of the performance of the code:</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><a href="#cb50-1" aria-hidden="true" tabindex="-1"></a>In [<span class="dv">574</span>]: <span class="op">%</span>lprun <span class="op">-</span>f add_and_sum <span class="op">-</span>f call_function call_function()</span>
<span id="cb50-2"><a href="#cb50-2" aria-hidden="true" tabindex="-1"></a>Timer unit: <span class="fl">1e-06</span> s</span>
<span id="cb50-3"><a href="#cb50-3" aria-hidden="true" tabindex="-1"></a>File: prof_mod.py</span>
<span id="cb50-4"><a href="#cb50-4" aria-hidden="true" tabindex="-1"></a>Function: add_and_sum at line <span class="dv">3</span></span>
<span id="cb50-5"><a href="#cb50-5" aria-hidden="true" tabindex="-1"></a>Total time: <span class="fl">0.005526</span> s</span>
<span id="cb50-6"><a href="#cb50-6" aria-hidden="true" tabindex="-1"></a>Line <span class="co">#      Hits         Time  Per Hit   % Time  Line Contents</span></span>
<span id="cb50-7"><a href="#cb50-7" aria-hidden="true" tabindex="-1"></a><span class="op">==============================================================</span></span>
<span id="cb50-8"><a href="#cb50-8" aria-hidden="true" tabindex="-1"></a>     <span class="dv">3</span>                                           <span class="kw">def</span> add_and_sum(x, y):</span>
<span id="cb50-9"><a href="#cb50-9" aria-hidden="true" tabindex="-1"></a>     <span class="dv">4</span>         <span class="dv">1</span>         <span class="dv">4375</span>   <span class="fl">4375.0</span>     <span class="fl">79.2</span>      added <span class="op">=</span> x <span class="op">+</span> y</span>
<span id="cb50-10"><a href="#cb50-10" aria-hidden="true" tabindex="-1"></a>     <span class="dv">5</span>         <span class="dv">1</span>         <span class="dv">1149</span>   <span class="fl">1149.0</span>     <span class="fl">20.8</span>      summed <span class="op">=</span> added.<span class="bu">sum</span>(axis<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb50-11"><a href="#cb50-11" aria-hidden="true" tabindex="-1"></a>     <span class="dv">6</span>         <span class="dv">1</span>            <span class="dv">2</span>      <span class="fl">2.0</span>      <span class="fl">0.0</span>      <span class="cf">return</span> summed</span>
<span id="cb50-12"><a href="#cb50-12" aria-hidden="true" tabindex="-1"></a>File: prof_mod.py</span>
<span id="cb50-13"><a href="#cb50-13" aria-hidden="true" tabindex="-1"></a>Function: call_function at line <span class="dv">8</span></span>
<span id="cb50-14"><a href="#cb50-14" aria-hidden="true" tabindex="-1"></a>Total time: <span class="fl">0.121016</span> s</span>
<span id="cb50-15"><a href="#cb50-15" aria-hidden="true" tabindex="-1"></a>Line <span class="co">#      Hits         Time  Per Hit   % Time  Line Contents</span></span>
<span id="cb50-16"><a href="#cb50-16" aria-hidden="true" tabindex="-1"></a><span class="op">==============================================================</span></span>
<span id="cb50-17"><a href="#cb50-17" aria-hidden="true" tabindex="-1"></a>     <span class="dv">8</span>                                           <span class="kw">def</span> call_function():</span>
<span id="cb50-18"><a href="#cb50-18" aria-hidden="true" tabindex="-1"></a>     <span class="dv">9</span>         <span class="dv">1</span>        <span class="dv">57169</span>  <span class="fl">57169.0</span>     <span class="fl">47.2</span>      x <span class="op">=</span> randn(<span class="dv">1000</span>, <span class="dv">1000</span>)</span>
<span id="cb50-19"><a href="#cb50-19" aria-hidden="true" tabindex="-1"></a>    <span class="dv">10</span>         <span class="dv">1</span>        <span class="dv">58304</span>  <span class="fl">58304.0</span>     <span class="fl">48.2</span>      y <span class="op">=</span> randn(<span class="dv">1000</span>, <span class="dv">1000</span>)</span>
<span id="cb50-20"><a href="#cb50-20" aria-hidden="true" tabindex="-1"></a>    <span class="dv">11</span>         <span class="dv">1</span>         <span class="dv">5543</span>   <span class="fl">5543.0</span>      <span class="fl">4.6</span>      <span class="cf">return</span> add_and_sum(x, y)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>As a general rule of thumb, I tend to prefer <code>%prun</code> (<code>cProfile</code>) for “macro” profiling, and <code>%lprun</code> (<code>line_profiler</code>) for “micro” profiling. It’s worthwhile to have a good understanding of both tools.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The reason that you must explicitly specify the names of the functions you want to profile with <code>%lprun</code> is that the overhead of “tracing” the execution time of each line is substantial. Tracing functions that are not of interest has the potential to significantly alter the profile results.</p>
</div>
</div>
</section>
</section>
<section id="workflow_run" class="level2" data-number="B.6">
<h2 data-number="B.6" class="anchored" data-anchor-id="workflow_run"><span class="header-section-number">B.6</span> Tips for Productive Code Development Using IPython</h2>
<p>Writing code in a way that makes it convenient to develop, debug, and ultimately <em>use</em> interactively may be a paradigm shift for many users. There are procedural details like code reloading that may require some adjustment, as well as coding style concerns.</p>
<p>Therefore, implementing most of the strategies described in this section is more of an art than a science and will require some experimentation on your part to determine a way to write your Python code that is effective for you. Ultimately you want to structure your code in a way that makes it convenient to use iteratively and be able to explore the results of running a program or function as effortlessly as possible. I have found software designed with IPython in mind to be easier to work with than code intended only to be run as as standalone command-line application. This becomes especially important when something goes wrong and you have to diagnose an error in code that you or someone else might have written months or years beforehand.</p>
<section id="workflow_run_reloading" class="level3">
<h3 class="anchored" data-anchor-id="workflow_run_reloading">Reloading Module Dependencies</h3>
<p>In Python, when you type <code>import some_lib</code>, the code in <code>some_lib</code> is executed, and all the variables, functions, and imports defined within are stored in the newly created <code>some_lib</code> module namespace. The next time you use <code>import some_lib</code>, you will get a reference to the existing module namespace. The potential difficulty in interactive IPython code development comes when you, say, <code>%run</code> a script that depends on some other module where you may have made changes. Suppose I had the following code in <em>test_script.py</em>:</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><a href="#cb51-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> some_lib</span>
<span id="cb51-2"><a href="#cb51-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-3"><a href="#cb51-3" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb51-4"><a href="#cb51-4" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>]</span>
<span id="cb51-5"><a href="#cb51-5" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> some_lib.get_answer(x, y)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>If you were to execute <code>%run test_script.py</code> then modify <em>some_lib.py</em>, the next time you execute <code>%run test_script.py</code> you will still get the <em>old version</em> of <em>some_lib.py</em> because of Python’s “load-once” module system. This behavior differs from some other data analysis environments, like MATLAB, which automatically propagate code changes.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> To cope with this, you have a couple of options. The first way is to use the <code>reload</code> function in the <code>importlib</code> module in the standard library:</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><a href="#cb52-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> some_lib</span>
<span id="cb52-2"><a href="#cb52-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> importlib</span>
<span id="cb52-3"><a href="#cb52-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb52-4"><a href="#cb52-4" aria-hidden="true" tabindex="-1"></a>importlib.<span class="bu">reload</span>(some_lib)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>This attempts to give you a fresh copy of <em>some_lib.py</em> every time you run <em>test_script.py</em> (but there are some scenarios where it will not). Obviously, if the dependencies go deeper, it might be a bit tricky to be inserting usages of <code>reload</code> all over the place. For this problem, IPython has a special <code>dreload</code> function (<em>not</em> a magic function) for “deep” (recursive) reloading of modules. If I were to run <em>some_lib.py</em> then use <code>dreload(some_lib)</code>, it will attempt to reload <code>some_lib</code> as well as all of its dependencies. This will not work in all cases, unfortunately, but when it does, it beats having to restart IPython.</p>
</section>
<section id="workflow_designing" class="level3">
<h3 class="anchored" data-anchor-id="workflow_designing">Code Design Tips</h3>
<p>There’s no simple recipe for this, but here are some high-level principles I have found effective in my own work.</p>
<section id="ipython_designing_1" class="level4">
<h4 class="anchored" data-anchor-id="ipython_designing_1">Keep relevant objects and data alive</h4>
<p>It’s not unusual to see a program written for the command line with a structure somewhat like the following:</p>
<div class="sourceCode" id="cb53"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><a href="#cb53-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> my_functions <span class="im">import</span> g</span>
<span id="cb53-2"><a href="#cb53-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb53-3"><a href="#cb53-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> f(x, y):</span>
<span id="cb53-4"><a href="#cb53-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> g(x <span class="op">+</span> y)</span>
<span id="cb53-5"><a href="#cb53-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb53-6"><a href="#cb53-6" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb53-7"><a href="#cb53-7" aria-hidden="true" tabindex="-1"></a>    x <span class="op">=</span> <span class="dv">6</span></span>
<span id="cb53-8"><a href="#cb53-8" aria-hidden="true" tabindex="-1"></a>    y <span class="op">=</span> <span class="fl">7.5</span></span>
<span id="cb53-9"><a href="#cb53-9" aria-hidden="true" tabindex="-1"></a>    result <span class="op">=</span> x <span class="op">+</span> y</span>
<span id="cb53-10"><a href="#cb53-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb53-11"><a href="#cb53-11" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span>
<span id="cb53-12"><a href="#cb53-12" aria-hidden="true" tabindex="-1"></a>    main()</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Do you see what might go wrong if we were to run this program in IPython? After it’s done, none of the results or objects defined in the <code>main</code> function will be accessible in the IPython shell. A better way is to have whatever code is in <code>main</code> execute directly in the module’s global namespace (or in the <code>if __name__ == '__main__':</code> block, if you want the module to also be importable). That way, when you <code>%run</code> the code, you’ll be able to look at all of the variables defined in <code>main</code>. This is equivalent to defining top-level variables in cells in the Jupyter notebook.</p>
</section>
<section id="ipython_designing_2" class="level4">
<h4 class="anchored" data-anchor-id="ipython_designing_2">Flat is better than nested</h4>
<p>Deeply nested code makes me think about the many layers of an onion. When testing or debugging a function, how many layers of the onion must you peel back in order to reach the code of interest? The idea that “flat is better than nested” is a part of the Zen of Python, and it applies generally to developing code for interactive use as well. Making functions and classes as decoupled and modular as possible makes them easier to test (if you are writing unit tests), debug, and use interactively.</p>
</section>
<section id="ipython_designing_3" class="level4">
<h4 class="anchored" data-anchor-id="ipython_designing_3">Overcome a fear of longer files</h4>
<p>If you come from a Java (or another such language) background, you may have been told to keep files short. In many languages, this is sound advice; long length is usually a bad “code smell,” indicating refactoring or reorganization may be necessary. However, while developing code using IPython, working with 10 small but interconnected files (under, say, 100 lines each) is likely to cause you more headaches in general than 2 or 3 longer files. Fewer files means fewer modules to reload and less jumping between files while editing, too. I have found maintaining larger modules, each with high <em>internal</em> cohesion (the code all relates to solving the same kinds of problems), to be much more useful and Pythonic. After iterating toward a solution, of course it sometimes will make sense to refactor larger files into smaller ones.</p>
<p>Obviously, I don’t support taking this argument to the extreme, which would to be to put all of your code in a single monstrous file. Finding a sensible and intuitive module and package structure for a large codebase often takes a bit of work, but it is especially important to get right in teams. Each module should be internally cohesive, and it should be as obvious as possible where to find functions and classes responsible for each area of functionality.</p>
</section>
</section>
</section>
<section id="ipython_advanced" class="level2" data-number="B.7">
<h2 data-number="B.7" class="anchored" data-anchor-id="ipython_advanced"><span class="header-section-number">B.7</span> Advanced IPython Features</h2>
<p>Making full use of the IPython system may lead you to write your code in a slightly different way, or to dig into the configuration.</p>
<section id="ipython_configuration" class="level3">
<h3 class="anchored" data-anchor-id="ipython_configuration">Profiles and Configuration</h3>
<p>Most aspects of the appearance (colors, prompt, spacing between lines, etc.) and behavior of the IPython and Jupyter environments are configurable through an extensive configuration system. Here are some things you can do via configuration:</p>
<ul>
<li><p>Change the color scheme</p></li>
<li><p>Change how the input and output prompts look, or remove the blank line after <code>Out</code> and before the next <code>In</code> prompt</p></li>
<li><p>Execute an arbitrary list of Python statements (e.g., imports that you use all the time or anything else you want to happen each time you launch IPython)</p></li>
<li><p>Enable always-on IPython extensions, like the <code>%lprun</code> magic in <code>line_profiler</code></p></li>
<li><p>Enable Jupyter extensions</p></li>
<li><p>Define your own magics or system aliases</p></li>
</ul>
<p>Configurations for the IPython shell are specified in special <em>ipython_config.py</em> files, which are usually found in the <em>.ipython/</em> directory in your user home directory. Configuration is performed based on a particular <em>profile</em>. When you start IPython normally, you load up, by default, the <em>default profile</em>, stored in the <em>profile_default</em> directory. Thus, on my Linux OS, the full path to my default IPython configuration file is:</p>
<pre><code>/home/wesm/.ipython/profile_default/ipython_config.py</code></pre>
<p>To initialize this file on your system, run this in the terminal:</p>
<pre><code>ipython profile create default</code></pre>
<p>I’ll spare you the complete details of what’s in this file. Fortunately, it has comments describing what each configuration option is for, so I will leave it to the reader to tinker and customize. One additional useful feature is that it’s possible to have <em>multiple profiles</em>. Suppose you wanted to have an alternative IPython configuration tailored for a particular application or project. Creating a new profile involves typing the following:</p>
<pre><code>ipython profile create secret_project</code></pre>
<p>Once you’ve done this, edit the config files in the newly created <em>profile_secret_project</em> directory and then launch IPython, like so:</p>
<pre><code>$ ipython --profile=secret_project
Python 3.8.0 | packaged by conda-forge | (default, Nov 22 2019, 19:11:19)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.22.0 -- An enhanced Interactive Python. Type '?' for help.

IPython profile: secret_project</code></pre>
<p>As always, the online IPython documentation is an excellent resource for more on profiles and configuration.</p>
<p>Configuration for Jupyter works a little differently because you can use its notebooks with languages other than Python. To create an analogous Jupyter config file, run:</p>
<pre><code>jupyter notebook --generate-config</code></pre>
<p>This writes a default config file to the <em>.jupyter/jupyter_notebook_config.py</em> directory in your home directory. After editing this to suit your needs, you may rename it to a different file, like:</p>
<pre><code>$ mv ~/.jupyter/jupyter_notebook_config.py ~/.jupyter/my_custom_config.py</code></pre>
<p>When launching Jupyter, you can then add the <code>--config</code> argument:</p>
<pre><code>jupyter notebook --config=~/.jupyter/my_custom_config.py</code></pre>
</section>
</section>
<section id="ipython_wrapping_up" class="level2" data-number="B.8">
<h2 data-number="B.8" class="anchored" data-anchor-id="ipython_wrapping_up"><span class="header-section-number">B.8</span> Conclusion</h2>
<p>As you work through the code examples in this book and grow your skills as a Python programmer, I encourage you to keep learning about the IPython and Jupyter ecosystems. Since these projects have been designed to assist user productivity, you may discover tools that enable you to do your work more easily than using the Python language and its computational libraries by themselves.</p>
<p>You can also find a wealth of interesting Jupyter notebooks on the <a href="https://nbviewer.jupyter.org">nbviewer website</a>.</p>


</section>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr>
<ol>
<li id="fn1"><p>Since a module or package may be imported in many different places in a particular program, Python caches a module’s code the first time it is imported rather than executing the code in the module every time. Otherwise, modularity and good code organization could potentially cause inefficiency in an application.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

<script async="" defer="" src="https://scripts.simpleanalyticscdn.com/latest.js"></script></main> <!-- /main -->
<script id="quarto-html-after-body" type="application/javascript">
window.document.addEventListener("DOMContentLoaded", function (event) {
  const toggleBodyColorMode = (bsSheetEl) => {
    const mode = bsSheetEl.getAttribute("data-mode");
    const bodyEl = window.document.querySelector("body");
    if (mode === "dark") {
      bodyEl.classList.add("quarto-dark");
      bodyEl.classList.remove("quarto-light");
    } else {
      bodyEl.classList.add("quarto-light");
      bodyEl.classList.remove("quarto-dark");
    }
  }
  const toggleBodyColorPrimary = () => {
    const bsSheetEl = window.document.querySelector("link#quarto-bootstrap");
    if (bsSheetEl) {
      toggleBodyColorMode(bsSheetEl);
    }
  }
  toggleBodyColorPrimary();  
  const disableStylesheet = (stylesheets) => {
    for (let i=0; i < stylesheets.length; i++) {
      const stylesheet = stylesheets[i];
      stylesheet.rel = 'prefetch';
    }
  }
  const enableStylesheet = (stylesheets) => {
    for (let i=0; i < stylesheets.length; i++) {
      const stylesheet = stylesheets[i];
      stylesheet.rel = 'stylesheet';
    }
  }
  const manageTransitions = (selector, allowTransitions) => {
    const els = window.document.querySelectorAll(selector);
    for (let i=0; i < els.length; i++) {
      const el = els[i];
      if (allowTransitions) {
        el.classList.remove('notransition');
      } else {
        el.classList.add('notransition');
      }
    }
  }
  const toggleColorMode = (alternate) => {
    // Switch the stylesheets
    const alternateStylesheets = window.document.querySelectorAll('link.quarto-color-scheme.quarto-color-alternate');
    manageTransitions('#quarto-margin-sidebar .nav-link', false);
    if (alternate) {
      enableStylesheet(alternateStylesheets);
      for (const sheetNode of alternateStylesheets) {
        if (sheetNode.id === "quarto-bootstrap") {
          toggleBodyColorMode(sheetNode);
        }
      }
    } else {
      disableStylesheet(alternateStylesheets);
      toggleBodyColorPrimary();
    }
    manageTransitions('#quarto-margin-sidebar .nav-link', true);
    // Switch the toggles
    const toggles = window.document.querySelectorAll('.quarto-color-scheme-toggle');
    for (let i=0; i < toggles.length; i++) {
      const toggle = toggles[i];
      if (toggle) {
        if (alternate) {
          toggle.classList.add("alternate");     
        } else {
          toggle.classList.remove("alternate");
        }
      }
    }
    // Hack to workaround the fact that safari doesn't
    // properly recolor the scrollbar when toggling (#1455)
    if (navigator.userAgent.indexOf('Safari') > 0 && navigator.userAgent.indexOf('Chrome') == -1) {
      manageTransitions("body", false);
      window.scrollTo(0, 1);
      setTimeout(() => {
        window.scrollTo(0, 0);
        manageTransitions("body", true);
      }, 40);  
    }
  }
  const isFileUrl = () => { 
    return window.location.protocol === 'file:';
  }
  const hasAlternateSentinel = () => {  
    let styleSentinel = getColorSchemeSentinel();
    if (styleSentinel !== null) {
      return styleSentinel === "alternate";
    } else {
      return false;
    }
  }
  const setStyleSentinel = (alternate) => {
    const value = alternate ? "alternate" : "default";
    if (!isFileUrl()) {
      window.localStorage.setItem("quarto-color-scheme", value);
    } else {
      localAlternateSentinel = value;
    }
  }
  const getColorSchemeSentinel = () => {
    if (!isFileUrl()) {
      const storageValue = window.localStorage.getItem("quarto-color-scheme");
      return storageValue != null ? storageValue : localAlternateSentinel;
    } else {
      return localAlternateSentinel;
    }
  }
  let localAlternateSentinel = 'default';
  // Dark / light mode switch
  window.quartoToggleColorScheme = () => {
    // Read the current dark / light value 
    let toAlternate = !hasAlternateSentinel();
    toggleColorMode(toAlternate);
    setStyleSentinel(toAlternate);
  };
  // Ensure there is a toggle, if there isn't float one in the top right
  if (window.document.querySelector('.quarto-color-scheme-toggle') === null) {
    const a = window.document.createElement('a');
    a.classList.add('top-right');
    a.classList.add('quarto-color-scheme-toggle');
    a.href = "";
    a.onclick = function() { try { window.quartoToggleColorScheme(); } catch {} return false; };
    const i = window.document.createElement("i");
    i.classList.add('bi');
    a.appendChild(i);
    window.document.body.appendChild(a);
  }
  // Switch to dark mode if need be
  if (hasAlternateSentinel()) {
    toggleColorMode(true);
  } else {
    toggleColorMode(false);
  }
  const icon = "";
  const anchorJS = new window.AnchorJS();
  anchorJS.options = {
    placement: 'right',
    icon: icon
  };
  anchorJS.add('.anchored');
  const isCodeAnnotation = (el) => {
    for (const clz of el.classList) {
      if (clz.startsWith('code-annotation-')) {                     
        return true;
      }
    }
    return false;
  }
  const clipboard = new window.ClipboardJS('.code-copy-button', {
    text: function(trigger) {
      const codeEl = trigger.previousElementSibling.cloneNode(true);
      for (const childEl of codeEl.children) {
        if (isCodeAnnotation(childEl)) {
          childEl.remove();
        }
      }
      return codeEl.innerText;
    }
  });
  clipboard.on('success', function(e) {
    // button target
    const button = e.trigger;
    // don't keep focus
    button.blur();
    // flash "checked"
    button.classList.add('code-copy-button-checked');
    var currentTitle = button.getAttribute("title");
    button.setAttribute("title", "Copied!");
    let tooltip;
    if (window.bootstrap) {
      button.setAttribute("data-bs-toggle", "tooltip");
      button.setAttribute("data-bs-placement", "left");
      button.setAttribute("data-bs-title", "Copied!");
      tooltip = new bootstrap.Tooltip(button, 
        { trigger: "manual", 
          customClass: "code-copy-button-tooltip",
          offset: [0, -8]});
      tooltip.show();    
    }
    setTimeout(function() {
      if (tooltip) {
        tooltip.hide();
        button.removeAttribute("data-bs-title");
        button.removeAttribute("data-bs-toggle");
        button.removeAttribute("data-bs-placement");
      }
      button.setAttribute("title", currentTitle);
      button.classList.remove('code-copy-button-checked');
    }, 1000);
    // clear code selection
    e.clearSelection();
  });
  function tippyHover(el, contentFn) {
    const config = {
      allowHTML: true,
      content: contentFn,
      maxWidth: 500,
      delay: 100,
      arrow: false,
      appendTo: function(el) {
          return el.parentElement;
      },
      interactive: true,
      interactiveBorder: 10,
      theme: 'quarto',
      placement: 'bottom-start'
    };
    window.tippy(el, config); 
  }
  const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
  for (var i=0; i<noterefs.length; i++) {
    const ref = noterefs[i];
    tippyHover(ref, function() {
      // use id or data attribute instead here
      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
      try { href = new URL(href).hash; } catch {}
      const id = href.replace(/^#\/?/, "");
      const note = window.document.getElementById(id);
      return note.innerHTML;
    });
  }
      let selectedAnnoteEl;
      const selectorForAnnotation = ( cell, annotation) => {
        let cellAttr = 'data-code-cell="' + cell + '"';
        let lineAttr = 'data-code-annotation="' +  annotation + '"';
        const selector = 'span[' + cellAttr + '][' + lineAttr + ']';
        return selector;
      }
      const selectCodeLines = (annoteEl) => {
        const doc = window.document;
        const targetCell = annoteEl.getAttribute("data-target-cell");
        const targetAnnotation = annoteEl.getAttribute("data-target-annotation");
        const annoteSpan = window.document.querySelector(selectorForAnnotation(targetCell, targetAnnotation));
        const lines = annoteSpan.getAttribute("data-code-lines").split(",");
        const lineIds = lines.map((line) => {
          return targetCell + "-" + line;
        })
        let top = null;
        let height = null;
        let parent = null;
        if (lineIds.length > 0) {
            //compute the position of the single el (top and bottom and make a div)
            const el = window.document.getElementById(lineIds[0]);
            top = el.offsetTop;
            height = el.offsetHeight;
            parent = el.parentElement.parentElement;
          if (lineIds.length > 1) {
            const lastEl = window.document.getElementById(lineIds[lineIds.length - 1]);
            const bottom = lastEl.offsetTop + lastEl.offsetHeight;
            height = bottom - top;
          }
          if (top !== null && height !== null && parent !== null) {
            // cook up a div (if necessary) and position it 
            let div = window.document.getElementById("code-annotation-line-highlight");
            if (div === null) {
              div = window.document.createElement("div");
              div.setAttribute("id", "code-annotation-line-highlight");
              div.style.position = 'absolute';
              parent.appendChild(div);
            }
            div.style.top = top - 2 + "px";
            div.style.height = height + 4 + "px";
            let gutterDiv = window.document.getElementById("code-annotation-line-highlight-gutter");
            if (gutterDiv === null) {
              gutterDiv = window.document.createElement("div");
              gutterDiv.setAttribute("id", "code-annotation-line-highlight-gutter");
              gutterDiv.style.position = 'absolute';
              const codeCell = window.document.getElementById(targetCell);
              const gutter = codeCell.querySelector('.code-annotation-gutter');
              gutter.appendChild(gutterDiv);
            }
            gutterDiv.style.top = top - 2 + "px";
            gutterDiv.style.height = height + 4 + "px";
          }
          selectedAnnoteEl = annoteEl;
        }
      };
      const unselectCodeLines = () => {
        const elementsIds = ["code-annotation-line-highlight", "code-annotation-line-highlight-gutter"];
        elementsIds.forEach((elId) => {
          const div = window.document.getElementById(elId);
          if (div) {
            div.remove();
          }
        });
        selectedAnnoteEl = undefined;
      };
      // Attach click handler to the DT
      const annoteDls = window.document.querySelectorAll('dt[data-target-cell]');
      for (const annoteDlNode of annoteDls) {
        annoteDlNode.addEventListener('click', (event) => {
          const clickedEl = event.target;
          if (clickedEl !== selectedAnnoteEl) {
            unselectCodeLines();
            const activeEl = window.document.querySelector('dt[data-target-cell].code-annotation-active');
            if (activeEl) {
              activeEl.classList.remove('code-annotation-active');
            }
            selectCodeLines(clickedEl);
            clickedEl.classList.add('code-annotation-active');
          } else {
            // Unselect the line
            unselectCodeLines();
            clickedEl.classList.remove('code-annotation-active');
          }
        });
      }
  const findCites = (el) => {
    const parentEl = el.parentElement;
    if (parentEl) {
      const cites = parentEl.dataset.cites;
      if (cites) {
        return {
          el,
          cites: cites.split(' ')
        };
      } else {
        return findCites(el.parentElement)
      }
    } else {
      return undefined;
    }
  };
  var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
  for (var i=0; i<bibliorefs.length; i++) {
    const ref = bibliorefs[i];
    const citeInfo = findCites(ref);
    if (citeInfo) {
      tippyHover(citeInfo.el, function() {
        var popup = window.document.createElement('div');
        citeInfo.cites.forEach(function(cite) {
          var citeDiv = window.document.createElement('div');
          citeDiv.classList.add('hanging-indent');
          citeDiv.classList.add('csl-entry');
          var biblioDiv = window.document.getElementById('ref-' + cite);
          if (biblioDiv) {
            citeDiv.innerHTML = biblioDiv.innerHTML;
          }
          popup.appendChild(citeDiv);
        });
        return popup.innerHTML;
      });
    }
  }
});
</script>
<nav class="page-navigation">
  <div class="nav-page nav-page-previous">
      <a class='pagination-link' href='/book/advanced-numpy'>
        <i class="bi bi-arrow-left-short"></i> <span class="nav-page-text"><span class="chapter-number">A</span>&nbsp; <span class="chapter-title">Advanced NumPy</span></span>
      </a>          
  </div>
  <div class="nav-page nav-page-next">
  </div>
</nav>
</div> <!-- /content -->
<footer class="footer">
  <div class="nav-footer">
    <div class="nav-footer-left">Copyright 2023, Wes McKinney. All Rights Reserved.</div>   
    <div class="nav-footer-center">
      &nbsp;
    </div>
    <div class="nav-footer-right">
      <ul class="footer-items list-unstyled">
    <li class="nav-item compact">
    <a class="nav-link" href="https://twitter.com/wesmckinn">
      <i class="bi bi-twitter" role="img">
</i> 
    </a>
  </li>  
</ul>
    </div>
  </div>
</footer>
<script async="" src="https://media.ethicalads.io/media/client/ethicalads.min.js"></script>



</body></html>